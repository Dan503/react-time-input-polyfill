{"version":3,"sources":["time-polyfill/ReactTimeInputPolyfill.js","test-site/App.js","test-site/serviceWorker.js","index.js"],"names":["shiftKey","leading_zero","number","isNaN","purified","parseInt","window","addEventListener","e","$a11y","accessibility_block_created","polyfillClassName","customStyles","document","createElement","innerHTML","getElementsByTagName","appendChild","TimeInputPolyfill","props","$input","React","focused_via_click","state","time","hrs","min","mode","value24hr","value","currentSegment","usePolyfill","supportsTime","forcedValue","loadedPolyfill","this","polyfill","setState","get_values_from_24hr","create_a11y_block","manual_entry_log","current","label","get_label","announcementArray","update_a11y","setTimeout","component","flash24hrTime","form","forcePolyfill","polyfillSource","callback","timePolyfillHelpers","loadJS","loadPolyfill","onPolyfillLoad","removeEventListener","prevProps","prevState","hasNewPropsValue","hasNewStateValue","onTimeChange","set_time","time24hr","split","map","newTimeValues","convert_hours_to_12hr_time","direction","segment","current_values","modifier","current_time","Date","getHours","getMinutes","minutes","up","down","set_segment","timeObj","join","value12hr","get_12hr_value","convert_to_24hr_time","segments","newIndex","indexOf","clear_entry_log","clear","traverse_segments","onChange","element","target","onMouseDown","matches","onClick","select_cursor_segment","get_current_segment","onFocus","onBlur","preventDefault","prev_segment","next_segment","onKeyDown","key","actions","ArrowRight","ArrowLeft","ArrowUp","nudge_current_segment","ArrowDown","Delete","clear_current_segment","Backspace","numberKey","enter_number","A_or_P","enter_A_or_P","isNumberKey","test","is_A_or_P","handleTab","isA","entry_log","entry_count","items","length","upper_limits","limit","add","full_limit","full_entry","className","select_segment","polyfillClass","handleChange","handleFocus","handleBlur","handleMouseDown","handleClick","handleKeyDown","ref","type","trim","undefined","ExampleBlock","Input","codeString","useState","setValue","style","marginBottom","onSubmit","display","marginRight","currentValue","dark","language","showLineNumbers","replace","App","href","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d40a5c25.chunk.js","sourcesContent":["import * as React from 'react'\nimport supportsTime from 'time-input-polyfill/core/helpers/supportsTime'\nimport loadJS from 'time-input-polyfill/core/helpers/loadJS'\n\nlet shiftKey = false\n\nconst leading_zero = (number) => {\n\tif (isNaN(number)) return number\n\tconst purified = parseInt(number)\n\treturn purified < 10 ? '0' + purified : number\n}\n\nwindow.addEventListener('keyup', (e) => (shiftKey = e.shiftKey))\nwindow.addEventListener('keydown', (e) => (shiftKey = e.shiftKey))\n\nconst loadPolyfill = (polyfillSource, callback) => {\n\tif (window.timePolyfillHelpers) {\n\t\tcallback()\n\t\treturn null\n\t}\n\n\tconst cdn =\n\t\t'https://cdn.jsdelivr.net/npm/react-time-input-polyfill@1/dist/timePolyfillHelpers.js'\n\n\tloadJS(polyfillSource || cdn, callback)\n}\n\nlet accessibility_block_created = false\nlet $a11y\n\nconst polyfillClassName = 'react-time-input-polyfill-target'\n\nconst customStyles = document.createElement('style')\ncustomStyles.innerHTML = `.${polyfillClassName} { font-family: monospace } .${polyfillClassName}::-ms-clear { display: none; }`\ndocument.getElementsByTagName('head')[0].appendChild(customStyles)\n\nconst flash24hrTime = (component) => () => {\n\tif (component.state.usePolyfill) {\n\t\tcomponent.setState({ forcedValue: component.state.value24hr })\n\t\tsetTimeout(() => component.setState({ forcedValue: null }), 1)\n\t}\n}\n\nexport default class TimeInputPolyfill extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.$input = React.createRef()\n\t\tthis.focused_via_click = false\n\n\t\tthis.state = {\n\t\t\ttime: {\n\t\t\t\thrs: '--',\n\t\t\t\tmin: '--',\n\t\t\t\tmode: '--',\n\t\t\t},\n\t\t\tvalue24hr: props.value || '',\n\t\t\tcurrentSegment: null,\n\t\t\tusePolyfill: !supportsTime,\n\t\t\tforcedValue: null,\n\t\t}\n\t}\n\n\tonPolyfillLoad(loadedPolyfill) {\n\t\tthis.polyfill = loadedPolyfill\n\n\t\tthis.setState({\n\t\t\tusePolyfill: true,\n\t\t\ttime: this.polyfill.get_values_from_24hr(this.state.value24hr),\n\t\t})\n\n\t\tif (!accessibility_block_created) {\n\t\t\t$a11y = this.polyfill.create_a11y_block()\n\t\t\taccessibility_block_created = true\n\t\t}\n\n\t\tthis.manual_entry_log = {\n\t\t\thrs: new this.polyfill.manual_entry_log(),\n\t\t\tmin: new this.polyfill.manual_entry_log(),\n\t\t}\n\n\t\tconst $input = this.$input.current\n\t\t$input.polyfill = {\n\t\t\tlabel: this.polyfill.get_label($input),\n\t\t\t$a11y,\n\t\t}\n\t}\n\n\tupdate_a11y(announcementArray) {\n\t\tif (!this.state.usePolyfill) return null\n\t\tthis.polyfill.update_a11y(this.$input.current, announcementArray)\n\t}\n\n\tcomponentDidMount() {\n\t\tsetTimeout(() => {\n\t\t\tthis.flash24hrTime = flash24hrTime(this)\n\n\t\t\tif (this.$input.current?.form) {\n\t\t\t\tthis.$input.current.form.addEventListener(\n\t\t\t\t\t'submit',\n\t\t\t\t\tthis.flash24hrTime,\n\t\t\t\t)\n\t\t\t}\n\t\t}, 0)\n\n\t\tif (this.props.forcePolyfill || !supportsTime) {\n\t\t\tloadPolyfill(this.props.polyfillSource, () => {\n\t\t\t\tthis.onPolyfillLoad(window.timePolyfillHelpers)\n\t\t\t})\n\t\t}\n\t}\n\tcomponentWillUnmount() {\n\t\tif (this.$input.current?.form) {\n\t\t\tthis.$input.current.form.removeEventListener(\n\t\t\t\t'submit',\n\t\t\t\tthis.flash24hrTime,\n\t\t\t)\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconst hasNewPropsValue = prevProps.value !== this.props.value\n\t\tconst hasNewStateValue = prevState.value24hr !== this.state.value24hr\n\n\t\tif (!hasNewPropsValue && !hasNewStateValue) return null\n\n\t\tif (hasNewStateValue) {\n\t\t\tthis.onTimeChange()\n\t\t} else if (hasNewPropsValue) {\n\t\t\tthis.set_time(this.props.value)\n\t\t}\n\t}\n\n\tset_time(time24hr) {\n\t\tconst [hrs, min] = time24hr\n\t\t\t.split(':')\n\t\t\t.map((value) => (isNaN(value) ? value : parseInt(value)))\n\n\t\tconst newTimeValues = this.state.usePolyfill\n\t\t\t? {\n\t\t\t\t\thrs: this.polyfill.convert_hours_to_12hr_time(hrs),\n\t\t\t\t\tmin,\n\t\t\t\t\tmode: hrs > 12 ? 'PM' : 'AM',\n\t\t\t  }\n\t\t\t: null\n\n\t\tthis.setState({\n\t\t\ttime: this.state.usePolyfill\n\t\t\t\t? time24hr\n\t\t\t\t\t? newTimeValues\n\t\t\t\t\t: {\n\t\t\t\t\t\t\thrs: '--',\n\t\t\t\t\t\t\tmin: '--',\n\t\t\t\t\t\t\tmode: '--',\n\t\t\t\t\t  }\n\t\t\t\t: null,\n\t\t\tvalue24hr: time24hr,\n\t\t})\n\t}\n\n\tnudge_current_segment(direction) {\n\t\tconst segment = this.state.currentSegment\n\n\t\tconst current_values = this.state.time\n\t\tlet time = {}\n\n\t\tconst modifier = direction === 'up' ? 1 : -1\n\n\t\tif (current_values[segment] === '--') {\n\t\t\tvar current_time = () => new Date()\n\t\t\ttime = {\n\t\t\t\thrs: () =>\n\t\t\t\t\tthis.polyfill.convert_hours_to_12hr_time(\n\t\t\t\t\t\tcurrent_time().getHours(),\n\t\t\t\t\t),\n\t\t\t\tmin: () => current_time().getMinutes(),\n\t\t\t\tmode: () => (current_time().getHours() > 11 ? 'PM' : 'AM'),\n\t\t\t}\n\t\t} else {\n\t\t\tvar minutes = {\n\t\t\t\tup: current_values.min < 59 ? current_values.min + modifier : 0,\n\t\t\t\tdown:\n\t\t\t\t\tcurrent_values.min === 0\n\t\t\t\t\t\t? 59\n\t\t\t\t\t\t: current_values.min + modifier,\n\t\t\t}\n\t\t\ttime = {\n\t\t\t\thrs: () =>\n\t\t\t\t\tthis.polyfill.convert_hours_to_12hr_time(\n\t\t\t\t\t\tcurrent_values.hrs + modifier,\n\t\t\t\t\t),\n\t\t\t\tmin: () => minutes[direction],\n\t\t\t\tmode: () => (current_values.mode === 'AM' ? 'PM' : 'AM'),\n\t\t\t}\n\t\t}\n\t\tthis.set_segment(segment, time[segment]())\n\t}\n\n\tget_12hr_value(timeObj) {\n\t\tconst time = timeObj || this.state.time\n\t\treturn !time\n\t\t\t? ''\n\t\t\t: [\n\t\t\t\t\tleading_zero(time.hrs),\n\t\t\t\t\t':',\n\t\t\t\t\tleading_zero(time.min),\n\t\t\t\t\t' ',\n\t\t\t\t\ttime.mode,\n\t\t\t  ].join('')\n\t}\n\n\tset_segment(segment, value) {\n\t\tconst time = {\n\t\t\t...this.state.time,\n\t\t\t[segment]: isNaN(value) ? value : parseInt(value),\n\t\t}\n\n\t\tconst value12hr = this.get_12hr_value(time)\n\t\tconst value24hr = this.polyfill.convert_to_24hr_time(value12hr)\n\n\t\tthis.setState({\n\t\t\ttime,\n\t\t\tvalue24hr,\n\t\t})\n\t}\n\n\ttraverse_segments(direction) {\n\t\tconst { segments } = this.polyfill\n\t\tconst modifier = direction === 'left' ? -1 : 1\n\t\tconst newIndex = segments.indexOf(this.state.currentSegment) + modifier\n\t\tconst finalIndex = newIndex <= 0 ? 0 : newIndex >= 2 ? 2 : newIndex\n\t\tconst currentSegment = segments[finalIndex]\n\t\tthis.clear_entry_log()\n\t\tthis.setState({ currentSegment })\n\t\tsetTimeout(() => {\n\t\t\tthis.update_a11y(['select'])\n\t\t}, 0)\n\t}\n\n\tclear_entry_log() {\n\t\tconst { currentSegment } = this.state\n\t\tif (currentSegment !== 'mode') {\n\t\t\tthis.manual_entry_log[currentSegment].clear()\n\t\t}\n\t}\n\n\tnext_segment() {\n\t\tthis.traverse_segments('right')\n\t}\n\tprev_segment() {\n\t\tthis.traverse_segments('left')\n\t}\n\n\tclear_current_segment() {\n\t\tthis.set_segment(this.state.currentSegment, '--')\n\t}\n\n\tonTimeChange() {\n\t\tif (this.props.onChange) {\n\t\t\tthis.props.onChange({\n\t\t\t\tvalue: this.state.value24hr,\n\t\t\t\telement: this.$input.current,\n\t\t\t})\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tthis.update_a11y(['update'])\n\t\t}, 0)\n\t}\n\n\thandleChange(e) {\n\t\tif (this.state.usePolyfill) return null\n\t\tthis.setState({ value24hr: e.target.value })\n\t}\n\n\thandleMouseDown(e) {\n\t\tthis.props.onMouseDown && this.props.onMouseDown(e)\n\t\tthis.focused_via_click = true\n\n\t\tif (this.$input.current.matches(':focus')) {\n\t\t\tthis.update_a11y(['select'])\n\t\t}\n\t}\n\n\thandleClick(e) {\n\t\tthis.props.onClick && this.props.onClick(e)\n\t\tif (!this.state.usePolyfill) return null\n\t\tthis.polyfill.select_cursor_segment(this.$input.current)\n\t\tthis.setState({\n\t\t\tcurrentSegment: this.polyfill.get_current_segment(\n\t\t\t\tthis.$input.current,\n\t\t\t),\n\t\t})\n\t}\n\n\thandleFocus(e) {\n\t\tthis.props.onFocus && this.props.onFocus(e)\n\t\tif (!this.state.usePolyfill) return null\n\t\tconst segment = shiftKey ? 'mode' : 'hrs'\n\t\tif (!this.focused_via_click) {\n\t\t\tthis.setState({ currentSegment: segment })\n\t\t}\n\t\tthis.update_a11y(['initial', 'select'])\n\t}\n\n\thandleBlur(e) {\n\t\tthis.props.onBlur && this.props.onBlur(e)\n\t\tthis.focused_via_click = false\n\t\tthis.setState({ currentSegment: null })\n\t}\n\n\thandleTab(e) {\n\t\tif (e.shiftKey && this.state.currentSegment !== 'hrs') {\n\t\t\te.preventDefault()\n\t\t\tthis.prev_segment()\n\t\t} else if (!e.shiftKey && this.state.currentSegment !== 'mode') {\n\t\t\te.preventDefault()\n\t\t\tthis.next_segment()\n\t\t}\n\t}\n\n\thandleKeyDown(e) {\n\t\tthis.props.onKeyDown && this.props.onKeyDown(e)\n\t\tif (!this.state.usePolyfill) return null\n\t\tconst key = e.key\n\t\tconst actions = {\n\t\t\tArrowRight: () => this.next_segment(),\n\t\t\tArrowLeft: () => this.prev_segment(),\n\n\t\t\tArrowUp: () => this.nudge_current_segment('up'),\n\t\t\tArrowDown: () => this.nudge_current_segment('down'),\n\n\t\t\tDelete: () => this.clear_current_segment(),\n\t\t\tBackspace: () => this.clear_current_segment(),\n\n\t\t\tnumberKey: () => this.enter_number(e.key),\n\t\t\tA_or_P: () => this.enter_A_or_P(e.key),\n\t\t}\n\n\t\tconst isNumberKey = /\\d/.test(e.key)\n\t\tconst is_A_or_P = /[ap]/i.test(e.key)\n\n\t\tif (key === 'Tab') {\n\t\t\tthis.handleTab(e)\n\t\t} else if (actions[key]) {\n\t\t\te.preventDefault()\n\t\t\tactions[key]()\n\t\t} else if (isNumberKey) {\n\t\t\tactions.numberKey()\n\t\t} else if (is_A_or_P) {\n\t\t\tactions.A_or_P()\n\t\t} else if (key !== 'Escape') {\n\t\t\te.preventDefault()\n\t\t}\n\t}\n\n\tenter_A_or_P(key) {\n\t\tconst isA = /a/i.test(key)\n\t\tthis.set_segment('mode', isA ? 'AM' : 'PM')\n\t}\n\n\tenter_number(key) {\n\t\tconst segment = this.state.currentSegment\n\t\tconst number = parseInt(key)\n\t\tconst entry_log = this.manual_entry_log[segment]\n\t\tconst entry_count = entry_log.items.length\n\t\tconst upper_limits = {\n\t\t\thrs: [1, 2],\n\t\t\tmin: [5, 9],\n\t\t}\n\t\tconst limit = upper_limits[segment][entry_count]\n\n\t\tif (entry_count < 2) {\n\t\t\tentry_log.add(number)\n\t\t}\n\n\t\t// Can't be 00 in hours.\n\t\t// If the user sets hours to 00 the input automatically changes hours to 12\n\t\t// The same behaviour like default input[type=\"time\"].\n\t\tif (segment === 'hrs' && entry_log.items.join('') === '00') {\n\t\t\tentry_log.items = [1, 2]\n\t\t}\n\n\t\tconst full_limit = parseInt(upper_limits[segment].join(''))\n\t\tconst full_entry = parseInt(entry_log.items.join(''))\n\n\t\tif (full_limit >= full_entry) {\n\t\t\tthis.set_segment(segment, full_entry)\n\t\t}\n\n\t\tconst at_limit = number > limit || entry_log.items.length === 2\n\n\t\tif (at_limit) {\n\t\t\tthis.next_segment()\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { value, forcePolyfill, className, polyfillSource, ...props } =\n\t\t\tthis.props\n\t\tconst { usePolyfill, value24hr, currentSegment, forcedValue } =\n\t\t\tthis.state\n\n\t\tconst value12hr = usePolyfill ? this.get_12hr_value() : null\n\n\t\tif (usePolyfill && currentSegment !== null) {\n\t\t\tconst highlightSegment = () =>\n\t\t\t\tthis.polyfill.select_segment(\n\t\t\t\t\tthis.$input.current,\n\t\t\t\t\tcurrentSegment,\n\t\t\t\t)\n\t\t\tsetTimeout(highlightSegment, 0)\n\t\t}\n\n\t\tconst polyfillClass = this.state.usePolyfill ? polyfillClassName : ''\n\n\t\treturn React.createElement(\n\t\t\t'input',\n\t\t\t{\n\t\t\t\t...props,\n\t\t\t\tonChange: (e) => this.handleChange(e),\n\t\t\t\tonFocus: (e) => this.handleFocus(e),\n\t\t\t\tonBlur: (e) => this.handleBlur(e),\n\t\t\t\tonMouseDown: (e) => this.handleMouseDown(e),\n\t\t\t\tonClick: (e) => this.handleClick(e),\n\t\t\t\tonKeyDown: (e) => this.handleKeyDown(e),\n\t\t\t\tref: this.$input,\n\t\t\t\ttype: usePolyfill ? 'text' : 'time',\n\t\t\t\tvalue: usePolyfill ? forcedValue || value12hr : value24hr,\n\t\t\t\tclassName:\n\t\t\t\t\t[className || '', polyfillClass].join(' ').trim() ||\n\t\t\t\t\tundefined,\n\t\t\t},\n\t\t\tnull,\n\t\t)\n\t}\n}\n","import React, { useState } from 'react'\nimport './App.css'\nimport TimeInput from '../time-polyfill/ReactTimeInputPolyfill'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\n// const debugMode = true\nconst debugMode = false\n\nconst ExampleBlock = ({ label, Input, codeString }) => {\n\tconst [value, setValue] = useState('20:30')\n\n\treturn (\n\t\t<form\n\t\t\tstyle={{ marginBottom: '2em' }}\n\t\t\tonSubmit={(e) => e.preventDefault()}\n\t\t>\n\t\t\t<h2>{label} time input</h2>\n\n\t\t\t<label style={{ display: 'inline-block' }}>\n\t\t\t\t<span style={{ marginRight: '0.5em' }}>{label} time input</span>\n\t\t\t\t<Input\n\t\t\t\t\tcurrentValue={value}\n\t\t\t\t\tsetValue={setValue}\n\t\t\t\t\tclassName=\"exampleClass\"\n\t\t\t\t/>\n\t\t\t</label>\n\n\t\t\t<p>\n\t\t\t\t<button onClick={() => setValue('07:15')}>\n\t\t\t\t\tSet {label} time to 7:15 AM\n\t\t\t\t</button>\n\t\t\t\t<button onClick={() => setValue('15:45')}>\n\t\t\t\t\tSet {label} time to 3:45 PM\n\t\t\t\t</button>\n\t\t\t\t<button onClick={() => setValue('')}>\n\t\t\t\t\tSet {label} time to \"\"\n\t\t\t\t</button>\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\t{label} returned value: \"{value}\"\n\t\t\t</p>\n\n\t\t\t{!!codeString && (\n\t\t\t\t<SyntaxHighlighter\n\t\t\t\t\tstyle={dark}\n\t\t\t\t\tclassName=\"code\"\n\t\t\t\t\tlanguage=\"javascript\"\n\t\t\t\t\tshowLineNumbers={true}\n\t\t\t\t>\n\t\t\t\t\t{codeString.replace(/^\\n/, '')}\n\t\t\t\t</SyntaxHighlighter>\n\t\t\t)}\n\t\t</form>\n\t)\n}\n\nfunction App() {\n\t// let [addedLater, setAddedLater] = useState(false)\n\t// setTimeout(() => setAddedLater(true), 2000)\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>React Time Input Polyfill</h1>\n\n\t\t\t<p>Code examples are simplified guides, not exact code replicas.</p>\n\n\t\t\t<SyntaxHighlighter\n\t\t\t\tstyle={dark}\n\t\t\t\tclassName=\"code centered\"\n\t\t\t\tlanguage=\"text\"\n\t\t\t\tshowLineNumbers={false}\n\t\t\t>\n\t\t\t\tnpm install react-time-input-polyfill\n\t\t\t</SyntaxHighlighter>\n\n\t\t\t<p>\n\t\t\t\t<a href=\"https://github.com/Dan503/react-time-input-polyfill#react-time-input-polyfill\">\n\t\t\t\t\tVisit me on GitHub\n\t\t\t\t</a>\n\t\t\t</p>\n\n\t\t\t<ExampleBlock\n\t\t\t\tlabel=\"Non-forced polyfill\"\n\t\t\t\tInput={({ currentValue, setValue, className }) => (\n\t\t\t\t\t<TimeInput\n\t\t\t\t\t\tvalue={currentValue}\n\t\t\t\t\t\tonChange={({ value }) => setValue(value)}\n\t\t\t\t\t\tclassName={className}\n\t\t\t\t\t\tpolyfillSource={debugMode && './timePolyfillHelpers.js'}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\tcodeString={`\n/* TimeInput.js */\n\nimport React from 'react'\n\n// Import the component into your project\nimport TimeInputPolyfill from 'react-time-input-polyfill'\n\nexport const TimeInput = ({ label, currentValue, onInputChange }) => {\n\treturn (\n\t\t<label>\n\t\t\t<span>{label}</span>\n\t\t\t<TimeInputPolyfill\n\n\t\t\t\t// set the value through props\n\t\t\t\tvalue={currentValue}\n\n\t\t\t\t// onChange will run every time the value is updated\n\t\t\t\tonChange={({ value, element }) => {\n\t\t\t\t\tconsole.log({\n\n\t\t\t\t\t\t// The current value in 24 hour time format\n\t\t\t\t\t\tvalue,\n\n\t\t\t\t\t\t// The <input> HTML element\n\t\t\t\t\t\telement,\n\n\t\t\t\t\t})\n\n\t\t\t\t\t// Export the new value to the parent component\n\t\t\t\t\tonInputChange(value)\n\t\t\t\t}}\n\t\t\t/>\n\t\t</label>\n\t)\n}\n\n///////////////////////////////////////////////////\n\n/* ExampleForm.js */\n\nimport React, { useState } from 'react'\n\n// import your local time input component into your form component\nimport { TimeInput } from './TimeInput'\n\nexport const ExampleForm = ()=> {\n\n\t// Use state to keep track of the value\n\tconst [inputValue, setInputValue] = useState('20:30') // default to 8:30 PM\n\n\treturn (\n\t\t<form>\n\t\t\t<TimeInput\n\t\t\t\tlabel=\"Label text\"\n\n\t\t\t\t// Use the state value to set the time\n\t\t\t\tcurrentValue={inputValue}\n\n\t\t\t\t// Use the set state function to update the time when it changes\n\t\t\t\tonInputChange={ newValue => setInputValue(newValue) }\n\t\t\t/>\n\t\t\t<button type=\"submit\">Submit</button>\n\t\t</form>\n\t)\n}\n`}\n\t\t\t/>\n\n\t\t\t<ExampleBlock\n\t\t\t\tlabel=\"Forced polyfill\"\n\t\t\t\tInput={({ currentValue, setValue, className }) => (\n\t\t\t\t\t<TimeInput\n\t\t\t\t\t\tvalue={currentValue}\n\t\t\t\t\t\tonChange={({ value }) => setValue(value)}\n\t\t\t\t\t\tforcePolyfill={true}\n\t\t\t\t\t\tpolyfillSource={debugMode && './timePolyfillHelpers.js'}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\tcodeString={`\n/* TimeInput.js */\n\nimport React from 'react'\nimport TimeInputPolyfill from 'react-time-input-polyfill'\n\nexport const TimeInput = ({ label, currentValue, onInputChange }) => {\n\treturn (\n\t\t<label>\n\t\t\t<span>{label}</span>\n\t\t\t<TimeInputPolyfill\n\t\t\t\tvalue={currentValue}\n\n\t\t\t\t/*  Force browsers that support input[type=time]\n\t\t\t\t    to use the polyfill.\n\t\t\t\t    (useful for testing and debugging)\n\t\t\t\t*/  forcePolyfill={true}\n\n\t\t\t\tonChange={({ value, element }) => {\n\t\t\t\t\tonInputChange(value)\n\t\t\t\t}}\n\t\t\t/>\n\t\t</label>\n\t)\n}\n`}\n\t\t\t/>\n\n\t\t\t<ExampleBlock\n\t\t\t\tlabel=\"Non-polyfill\"\n\t\t\t\tInput={({ currentValue, setValue, className }) => (\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"time\"\n\t\t\t\t\t\tvalue={currentValue}\n\t\t\t\t\t\tonChange={(e) => setValue(e.target.value)}\n\t\t\t\t\t\tclassName={className}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\tcodeString={`\n/* TimeInput.js */\n\n// View this example in Internet Explorer\n// This is a normal time input with no polyfill applied\n\nimport React from 'react'\n\nexport const TimeInput = ({ label, currentValue, onInputChange }) => {\n\treturn (\n\t\t<label>\n\t\t\t<span>{label}</span>\n\t\t\t<input\n\t\t\t\ttype=\"time\"\n\t\t\t\tvalue={currentValue}\n\t\t\t\tonChange={(e) => {\n\t\t\t\t\tconsole.log(e) // the default browser event\n\t\t\t\t\tonInputChange(e.target.value)\n\t\t\t\t}}\n\t\t\t/>\n\t\t</label>\n\t)\n}`}\n\t\t\t/>\n\n\t\t\t{/* {addedLater && (\n\t\t\t\t<ExampleBlock\n\t\t\t\t\tlabel=\"Delayed forced polyfill\"\n\t\t\t\t\tInput={({ currentValue, setValue, className }) => (\n\t\t\t\t\t\t<TimeInput\n\t\t\t\t\t\t\tvalue={currentValue}\n\t\t\t\t\t\t\tonChange={({ value }) => setValue(value)}\n\t\t\t\t\t\t\tforcePolyfill={true}\n\t\t\t\t\t\t\tclassName={className}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t)} */}\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './test-site/index.css'\nimport App from './test-site/App'\nimport * as serviceWorker from './test-site/serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}