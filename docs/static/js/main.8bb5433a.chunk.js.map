{"version":3,"sources":["core/TimeInputPolyfill.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["TimeInputPolyfill","value","value24hr","setValue24hr","setValue","forcePolyfill","onChange","onFocus","onBlur","onMouseDown","onMouseUp","onKeyDown","className","style","polyfillSource","restProps","isPolyfilled","supportsTime","value24hrCache","useRef","update24hr","newValue24Hr","current","$input","useState","polyfill","setPolyfill","hasInitialised","setHasInitialised","focusedViaClick","setFocusedViaClick","blankValues","string12hr","value12hr","setValue12hr","timeObject","setTimeObject","cursorSegment","setCursorSegment","cursorSegmentRef","allowSegmentSelection","setAllowSegmentSelection","manualEntryLog","setManualEntryLog","useEffect","convertString24hr","toTimeObject","undefined","forcedValue","setForcedValue","overrideTime","setTimeout","$inputElement","form","addEventListener","removeEventListener","convertTimeObject","getCursorSegment","selectSegment","segment","timeObjAs24hr","to24hr","timeObjAs12hr","to12hr","a11yUpdate","getA11yValue","matchesTimeObject","newTimeObject","hasBlankValues","isBlankValue","key","timeObjectKeys","some","isAllBlankValues","every","getBlankValuesStatus","loadJS","window","timeInputPolyfillUtils","convertString12hr","a11yCreate","getA11yElement","ManualEntryLog","getNextSegment","onUpdate","fullValue12hr","timeObj","onLimitHit","resetSegmentEntryLog","reset","hasFocus","document","activeElement","polyfillClass","styles","fontFamily","polyfilledValue","e","target","isShiftHeldDown","a11yClear","selectCursorSegment","userChangeEvent","modifyTimeObject","getPrevSegment","regex","preventDefault","increment","isolated","decrement","theNextSegment","includes","clear","alphaNumericKeyName","test","add","ref","type","join","trim","_TimeInputPolyfill","React","memo","ExampleBlock","label","codeString","setForcePolyfill","exampleId","replace","marginBottom","onSubmit","display","htmlFor","marginRight","id","onClick","marginLeft","title","toLocaleLowerCase","Boolean","dark","language","showLineNumbers","TestClassInput","state","this","props","identifier","setState","Component","ClassBasedComponentExample","newValue","App","version","href","process","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8bb5433a.chunk.js","sourcesContent":["/**\n * # Full list of TODO items\n *\n * ## Non-essential\n *\n * These can be done after releasing v2.0.0\n *\n * - Apply tests to Class component version\n * - convert the Cypress test suite into a separate package\n */\n\nimport React, { useRef, useState, useEffect } from 'react'\nimport loadJS from '@dan503/load-js'\n\nimport type {\n\tTimeObject,\n\tString24hr,\n\tString12hr,\n\tPolyfill,\n\tSegment,\n\tTimeObjectKey,\n} from '@time-input-polyfill/utils/npm/types'\nimport type { ManualEntryLog } from '@time-input-polyfill/utils/npm/core/ManualEntryLog/ManualEntryLog'\n\n// Avoid bulk importing from index files to be more tree-shake friendly\nimport supportsTime from '@time-input-polyfill/utils/npm/common/supportsTime'\nimport { blankValues } from '@time-input-polyfill/utils/npm/common/blankValues'\n\nconst polyfillClassName = 'react-time-input-polyfill-target'\n\nexport type TimeInputValue = String24hr | undefined\n\nexport type SetTimeInputValue = React.Dispatch<\n\tReact.SetStateAction<TimeInputValue>\n>\n\nexport interface TimeInputPolyfillProps\n\textends React.HTMLAttributes<HTMLInputElement> {\n\t/** The string value of the input in 24 hour time. */\n\tvalue: TimeInputValue\n\t/** The setState function that updates the `value` prop. */\n\tsetValue: SetTimeInputValue\n\t/**\n\t * Set to true to force browsers that support input[type=time]\n\t * to use the polyfill.\n\t *\n\t * (Useful for testing and debugging)\n\t *\n\t * @default false */\n\tforcePolyfill?: boolean\n\t/**\n\t * Determines where to load the polyfill utility functions from.\n\t *\n\t * @default 'https://cdn.jsdelivr.net/npm/@time-input-polyfill/utils@1'\n\t */\n\tpolyfillSource?: string\n}\n\n/**\n * An `input[type=time]` element with a built in polyfill for browsers that don't support the time input natively.\n *\n * Only browsers that _need_ the polyfill code will download the polyfill.\n *\n * ```jsx\n * import TimeInput from '@time-input-polyfill/react'\n * // ...\n * const [value, setValue] = useState()\n * // ...\n * <TimeInput value={value} setValue={setValue} />\n * ```\n *\n * __Resources:__\n * - [Demo website](https://dan503.github.io/react-time-input-polyfill/)\n * - [GitHub repository](https://github.com/Dan503/react-time-input-polyfill)\n * - [npm package](https://www.npmjs.com/package/@time-input-polyfill/react)\n */\nconst TimeInputPolyfill = ({\n\tvalue: value24hr = '',\n\tsetValue: setValue24hr,\n\tforcePolyfill = false,\n\tonChange,\n\tonFocus,\n\tonBlur,\n\tonMouseDown,\n\tonMouseUp,\n\tonKeyDown,\n\tclassName = '',\n\tstyle,\n\tpolyfillSource = 'https://cdn.jsdelivr.net/npm/@time-input-polyfill/utils@1',\n\t...restProps\n}: TimeInputPolyfillProps) => {\n\tconst isPolyfilled = forcePolyfill || !supportsTime\n\n\tconst value24hrCache = useRef(value24hr)\n\n\tconst update24hr = (newValue24Hr: String24hr): void => {\n\t\tvalue24hrCache.current = newValue24Hr\n\t\tsetValue24hr(newValue24Hr)\n\t}\n\n\tconst $input = useRef<HTMLInputElement>(null)\n\n\tconst [polyfill, setPolyfill] = useState<Polyfill | null>(null)\n\tconst [hasInitialised, setHasInitialised] = useState(false)\n\n\tconst [focusedViaClick, setFocusedViaClick] = useState<boolean>(false)\n\n\tconst [value12hr, setValue12hr] = useState<String12hr>(blankValues.string12hr)\n\n\tconst [timeObject, setTimeObject] = useState<TimeObject>(\n\t\tblankValues.timeObject,\n\t)\n\n\tconst [cursorSegment, setCursorSegment] = useState<Segment | null>(null)\n\tconst cursorSegmentRef = useRef(cursorSegment)\n\tconst [allowSegmentSelection, setAllowSegmentSelection] =\n\t\tuseState<boolean>(false)\n\n\tconst [manualEntryLog, setManualEntryLog] = useState<ManualEntryLog | null>(\n\t\tnull,\n\t)\n\n\tuseEffect(() => {\n\t\tconst isBeingExternallySet = value24hr !== value24hrCache.current\n\t\tif (isBeingExternallySet && polyfill) {\n\t\t\tsetTimeObject(polyfill.convertString24hr(value24hr).toTimeObject())\n\t\t}\n\t}, [value24hr, polyfill])\n\n\t/*\n\t\t<Forced override value code>\n\n\t\tIf a developer for some reason wants to use normal submit functionality\n\t\tThis will quickly switch IE form inputs to 24 hour time before submitting\n\t\tthen switch back afterwards so the user doesn't notice\n\t*/\n\tconst [forcedValue, setForcedValue] = useState<String24hr | undefined>(\n\t\tundefined,\n\t)\n\t// Watch for form submission events and override the displayed time value on submit\n\tuseEffect(() => {\n\t\tconst overrideTime = () => {\n\t\t\tsetForcedValue(value24hr)\n\t\t\tsetTimeout(() => setForcedValue(undefined), 1)\n\t\t}\n\t\tconst $inputElement = $input.current\n\t\t$inputElement?.form?.addEventListener('submit', overrideTime)\n\t\treturn () => {\n\t\t\t$inputElement?.form?.removeEventListener('submit', overrideTime)\n\t\t}\n\t}, [value24hr])\n\t/* </Forced override value code>\t*/\n\n\tconst getBlankValuesStatus = (timeObject: TimeObject) => {\n\t\tif (!polyfill || !isPolyfilled) return {}\n\t\tconst isBlankValue = (key: TimeObjectKey) => timeObject[key] === null\n\t\tconst { timeObjectKeys } = polyfill\n\t\treturn {\n\t\t\thasBlankValues: timeObjectKeys.some(isBlankValue),\n\t\t\tisAllBlankValues: timeObjectKeys.every(isBlankValue),\n\t\t}\n\t}\n\n\t// Do all modifications through the timeObject. React will update the other values accordingly.\n\tuseEffect(() => {\n\t\tif (polyfill && isPolyfilled) {\n\t\t\tconst { convertTimeObject, getCursorSegment, selectSegment } = polyfill\n\t\t\tconst segment = cursorSegment || getCursorSegment($input.current)\n\t\t\tconst timeObjAs24hr = convertTimeObject(timeObject).to24hr()\n\t\t\tconst timeObjAs12hr = convertTimeObject(timeObject).to12hr()\n\n\t\t\tif (value12hr !== timeObjAs12hr) {\n\t\t\t\tsetValue12hr(timeObjAs12hr)\n\t\t\t\tupdate24hr(timeObjAs24hr)\n\t\t\t}\n\n\t\t\tif (allowSegmentSelection) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tselectSegment($input.current, segment)\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [allowSegmentSelection, cursorSegment, polyfill, isPolyfilled, timeObject])\n\n\tuseEffect(() => {\n\t\tif (polyfill && isPolyfilled) {\n\t\t\tconst { a11yUpdate, getA11yValue } = polyfill\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (getA11yValue()) {\n\t\t\t\t\ta11yUpdate($input.current, ['update'])\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}, [timeObject, polyfill, isPolyfilled])\n\n\tuseEffect(() => {\n\t\tif (polyfill && isPolyfilled) {\n\t\t\tconst { convertString24hr, matchesTimeObject } = polyfill\n\t\t\tconst newTimeObject = convertString24hr(value24hr).toTimeObject()\n\t\t\tconst { hasBlankValues } = getBlankValuesStatus(newTimeObject)\n\n\t\t\tif (\n\t\t\t\t!matchesTimeObject(newTimeObject, timeObject) &&\n\t\t\t\thasInitialised &&\n\t\t\t\t!hasBlankValues\n\t\t\t) {\n\t\t\t\tsetTimeObject(newTimeObject)\n\t\t\t}\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [value24hr, polyfill, isPolyfilled])\n\n\tuseEffect(() => {\n\t\tif (isPolyfilled) {\n\t\t\t// I tried making an \"essentials only\" utils js file. It somehow ended up turning into a MUCH larger file size than the original utils file.\n\t\t\t// Original utils file size: 19,848 bytes; essentials only file size: 24,481 bytes\n\t\t\t// So I just download the full utils instead of trying to reduce it.\n\t\t\t// Don't worry, it only downloads the polyfill once no matter how many inputs you have on the page\n\t\t\tloadJS(polyfillSource, () => {\n\t\t\t\tif (window.timeInputPolyfillUtils) {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tconvertString12hr,\n\t\t\t\t\t\tconvertString24hr,\n\t\t\t\t\t\ta11yCreate,\n\t\t\t\t\t\tgetA11yElement,\n\t\t\t\t\t\tManualEntryLog,\n\t\t\t\t\t\tgetNextSegment,\n\t\t\t\t\t} = window.timeInputPolyfillUtils\n\t\t\t\t\tsetPolyfill(window.timeInputPolyfillUtils)\n\t\t\t\t\tconst timeObject = convertString24hr(value24hr).toTimeObject()\n\t\t\t\t\tsetTimeObject(timeObject)\n\t\t\t\t\tif (!getA11yElement()) {\n\t\t\t\t\t\ta11yCreate()\n\t\t\t\t\t}\n\t\t\t\t\tsetManualEntryLog(\n\t\t\t\t\t\tnew ManualEntryLog({\n\t\t\t\t\t\t\ttimeObject,\n\t\t\t\t\t\t\tonUpdate({ fullValue12hr }) {\n\t\t\t\t\t\t\t\tconst timeObj = convertString12hr(fullValue12hr).toTimeObject()\n\t\t\t\t\t\t\t\tsetTimeObject(timeObj)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonLimitHit() {\n\t\t\t\t\t\t\t\tsetCursorSegment(getNextSegment(cursorSegmentRef.current))\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\t\t\t\t\tsetHasInitialised(true)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [isPolyfilled])\n\n\tconst resetSegmentEntryLog = () => {\n\t\tif (manualEntryLog && cursorSegment) {\n\t\t\tmanualEntryLog[cursorSegment].reset()\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tcursorSegmentRef.current = cursorSegment\n\t\tconst hasFocus = document.activeElement === $input.current\n\t\tif (polyfill && isPolyfilled && hasFocus) {\n\t\t\tconst { a11yUpdate, getA11yValue } = polyfill\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (getA11yValue()) {\n\t\t\t\t\ta11yUpdate($input.current, ['select'])\n\t\t\t\t} else {\n\t\t\t\t\ta11yUpdate($input.current, ['initial', 'select'])\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}, [cursorSegment, polyfill, isPolyfilled])\n\n\t//Reset entry log cursor segmet\n\tuseEffect(() => {\n\t\tresetSegmentEntryLog()\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [cursorSegment, manualEntryLog])\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tif (onChange) onChange(e)\n\t\tupdate24hr(e.target.value)\n\t}\n\tconst handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n\t\tif (onFocus) onFocus(e)\n\t\tif (polyfill && isPolyfilled) {\n\t\t\tsetAllowSegmentSelection(true)\n\t\t\tconst { isShiftHeldDown, getCursorSegment, a11yUpdate } = polyfill\n\n\t\t\tif (focusedViaClick) {\n\t\t\t\t// Need to wait for browser to settle before detecting the cursor segment\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetCursorSegment(getCursorSegment($input.current))\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tsetCursorSegment(isShiftHeldDown ? 'mode' : 'hrs12')\n\t\t\t}\n\t\t\tresetSegmentEntryLog()\n\t\t\ta11yUpdate($input.current, ['initial', 'select'])\n\t\t}\n\t}\n\tconst handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n\t\tif (onBlur) onBlur(e)\n\t\tsetAllowSegmentSelection(false)\n\t\tsetFocusedViaClick(false)\n\t\tpolyfill?.a11yClear()\n\t}\n\tconst handleMouseDown = (e: React.MouseEvent<HTMLInputElement>) => {\n\t\tif (onMouseDown) onMouseDown(e)\n\t\tsetFocusedViaClick(true)\n\t}\n\tconst handleMouseUp = (e: React.MouseEvent<HTMLInputElement>) => {\n\t\tif (onMouseUp) onMouseUp(e)\n\t\tif (polyfill && isPolyfilled) {\n\t\t\tpolyfill.selectCursorSegment($input.current)\n\t\t}\n\t}\n\tconst handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n\t\tif (onKeyDown) onKeyDown(e)\n\t\tif (polyfill && isPolyfilled) {\n\t\t\tconst key = e.key\n\n\t\t\tconst userChangeEvent = () => onChange && onChange(e)\n\n\t\t\tconst {\n\t\t\t\tmodifyTimeObject,\n\t\t\t\tgetCursorSegment,\n\t\t\t\tgetNextSegment,\n\t\t\t\tgetPrevSegment,\n\t\t\t\tisShiftHeldDown,\n\t\t\t\tregex,\n\t\t\t} = polyfill\n\n\t\t\tconst segment = cursorSegment || getCursorSegment($input.current)\n\n\t\t\tif (key === 'ArrowUp') {\n\t\t\t\tif (!cursorSegment) setCursorSegment(segment)\n\t\t\t\te.preventDefault()\n\t\t\t\tresetSegmentEntryLog()\n\n\t\t\t\tsetTimeObject(\n\t\t\t\t\tmodifyTimeObject(timeObject).increment[segment].isolated(),\n\t\t\t\t)\n\t\t\t\tuserChangeEvent()\n\t\t\t} else if (key === 'ArrowDown') {\n\t\t\t\tif (!cursorSegment) setCursorSegment(segment)\n\t\t\t\te.preventDefault()\n\t\t\t\tresetSegmentEntryLog()\n\n\t\t\t\tsetTimeObject(\n\t\t\t\t\tmodifyTimeObject(timeObject).decrement[segment].isolated(),\n\t\t\t\t)\n\t\t\t\tuserChangeEvent()\n\t\t\t} else if (key === 'ArrowLeft') {\n\t\t\t\te.preventDefault()\n\t\t\t\tsetCursorSegment(getPrevSegment(cursorSegment))\n\t\t\t} else if (key === 'ArrowRight') {\n\t\t\t\te.preventDefault()\n\t\t\t\tsetCursorSegment(getNextSegment(cursorSegment))\n\t\t\t} else if (key === 'Tab') {\n\t\t\t\tconst isNormal =\n\t\t\t\t\t(isShiftHeldDown && cursorSegment === 'hrs12') ||\n\t\t\t\t\t(!isShiftHeldDown && cursorSegment === 'mode')\n\t\t\t\tif (!isNormal) {\n\t\t\t\t\te.preventDefault()\n\t\t\t\t\tconst theNextSegment = isShiftHeldDown\n\t\t\t\t\t\t? getPrevSegment(cursorSegment)\n\t\t\t\t\t\t: getNextSegment(cursorSegment)\n\t\t\t\t\tsetCursorSegment(theNextSegment)\n\t\t\t\t}\n\t\t\t} else if (['Backspace', 'Delete'].includes(key)) {\n\t\t\t\te.preventDefault()\n\t\t\t\tif (cursorSegment) {\n\t\t\t\t\tsetTimeObject(modifyTimeObject(timeObject).clear[cursorSegment]())\n\t\t\t\t}\n\t\t\t\tuserChangeEvent()\n\t\t\t} else if (regex.alphaNumericKeyName.test(key) && manualEntryLog) {\n\t\t\t\te.preventDefault()\n\t\t\t\tmanualEntryLog[segment].add(key)\n\t\t\t\tuserChangeEvent()\n\t\t\t}\n\t\t}\n\t}\n\n\tconst polyfillClass = isPolyfilled ? polyfillClassName : ''\n\n\tconst styles = {\n\t\tfontFamily: 'monospace',\n\t\t...style,\n\t}\n\n\tconst polyfilledValue = forcedValue === undefined ? value12hr : forcedValue\n\n\treturn (\n\t\t<input\n\t\t\t{...restProps}\n\t\t\tonChange={handleChange}\n\t\t\tonFocus={handleFocus}\n\t\t\tonBlur={handleBlur}\n\t\t\tonMouseDown={handleMouseDown}\n\t\t\tonMouseUp={handleMouseUp}\n\t\t\tonKeyDown={handleKeyDown}\n\t\t\tref={$input}\n\t\t\ttype={isPolyfilled ? 'text' : 'time'}\n\t\t\tvalue={isPolyfilled ? polyfilledValue : value24hr}\n\t\t\tstyle={styles}\n\t\t\tclassName={[className, polyfillClass].join(' ').trim() || undefined}\n\t\t/>\n\t)\n}\n\nconst _TimeInputPolyfill = React.memo(TimeInputPolyfill)\n\nexport { _TimeInputPolyfill as TimeInputPolyfill }\nexport default _TimeInputPolyfill\n","// These polyfills are only necessary for the sake of IE11 being able to render the syntax highlighter\nimport 'core-js/features/symbol'\nimport 'core-js/features/promise'\nimport 'core-js/features/object/assign'\nimport 'core-js/features/array/includes'\nimport 'core-js/features/array/find'\nimport 'core-js/features/array/find-index'\n\nimport React, { Component, useState } from 'react'\nimport './App.css'\nimport {\n\tTimeInputPolyfill,\n\tTimeInputPolyfillProps,\n} from './core/TimeInputPolyfill'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport { version } from '../package.json'\n\nimport { EventName, AltEventName } from './App-tests-shared-stuff'\n\ninterface ExampleBlockProps\n\textends Omit<TimeInputPolyfillProps, 'value' | 'setValue'> {\n\tlabel: string\n\tcodeString?: string\n}\n\nconst ExampleBlock = ({\n\tlabel,\n\tcodeString,\n\t...restProps\n}: ExampleBlockProps) => {\n\tconst [value, setValue] = useState('20:30')\n\tconst [forcePolyfill, setForcePolyfill] = useState(true)\n\tconst exampleId = label.replace(/[^A-z]+/g, '-').replace(/-+$/g, '')\n\n\treturn (\n\t\t<form style={{ marginBottom: '2em' }} onSubmit={(e) => e.preventDefault()}>\n\t\t\t<h2>{label}</h2>\n\n\t\t\t<span style={{ display: 'inline-block' }}>\n\t\t\t\t<label htmlFor={exampleId + '-input'} style={{ marginRight: '0.5em' }}>\n\t\t\t\t\t{label}\n\t\t\t\t</label>\n\t\t\t\t<TimeInputPolyfill\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tsetValue={setValue}\n\t\t\t\t\tclassName=\"exampleClass\"\n\t\t\t\t\tid={exampleId + '-input'}\n\t\t\t\t\tforcePolyfill={forcePolyfill}\n\t\t\t\t\t{...restProps}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => setForcePolyfill(!forcePolyfill)}\n\t\t\t\t\tstyle={{ marginLeft: 10 }}\n\t\t\t\t\tid={exampleId + '-toggle-polyfill'}\n\t\t\t\t\ttitle=\"Toggle polyfill\"\n\t\t\t\t>\n\t\t\t\t\tPolyfill is <strong>{forcePolyfill ? 'ON' : 'OFF'}</strong>\n\t\t\t\t</button>\n\t\t\t</span>\n\n\t\t\t<p>\n\t\t\t\t<button onClick={() => setValue('07:15')} id={exampleId + '-button-1'}>\n\t\t\t\t\tSet {label.toLocaleLowerCase()} time to 7:15 AM\n\t\t\t\t</button>\n\t\t\t\t<button onClick={() => setValue('15:45')} id={exampleId + '-button-2'}>\n\t\t\t\t\tSet {label.toLocaleLowerCase()} time to 3:45 PM\n\t\t\t\t</button>\n\t\t\t\t<button onClick={() => setValue('')} id={exampleId + '-button-3'}>\n\t\t\t\t\tSet {label.toLocaleLowerCase()} time to \" \"\n\t\t\t\t</button>\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\t{label} returned value: \"\n\t\t\t\t<span id={exampleId + '-return-value'}>{value}</span>\"\n\t\t\t</p>\n\n\t\t\t{Boolean(codeString) && (\n\t\t\t\t<SyntaxHighlighter\n\t\t\t\t\tstyle={dark}\n\t\t\t\t\tclassName=\"code\"\n\t\t\t\t\tlanguage=\"javascript\"\n\t\t\t\t\tshowLineNumbers={true}\n\t\t\t\t>\n\t\t\t\t\t{codeString.replace(/^\\n/, '')}\n\t\t\t\t</SyntaxHighlighter>\n\t\t\t)}\n\t\t</form>\n\t)\n}\n\nclass TestClassInput extends Component<{\n\tvalue: string\n\tsetValue: React.Dispatch<React.SetStateAction<string>>\n}> {\n\tstate = { forcePolyfill: true }\n\trender() {\n\t\tconst { value, setValue } = this.props\n\t\tconst { forcePolyfill } = this.state\n\t\tconst identifier = 'class-based-component-example'\n\t\treturn (\n\t\t\t<span style={{ display: 'inline-block' }}>\n\t\t\t\t<label style={{ marginRight: '0.5em' }} htmlFor={`${identifier}-input`}>\n\t\t\t\t\tClass based version\n\t\t\t\t</label>\n\t\t\t\t<TimeInputPolyfill\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tsetValue={setValue}\n\t\t\t\t\tforcePolyfill={forcePolyfill}\n\t\t\t\t\tid={`${identifier}-input`}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => this.setState({ forcePolyfill: !forcePolyfill })}\n\t\t\t\t\tstyle={{ marginLeft: 10 }}\n\t\t\t\t\ttitle=\"Toggle polyfill\"\n\t\t\t\t\tid={`${identifier}-toggle-polyfill`}\n\t\t\t\t>\n\t\t\t\t\tPolyfill is <strong>{forcePolyfill ? 'ON' : 'OFF'}</strong>\n\t\t\t\t</button>\n\t\t\t</span>\n\t\t)\n\t}\n}\n\nclass ClassBasedComponentExample extends Component {\n\tstate = { value: '20:30' }\n\texampleId = 'class-based-component-example'\n\tsetValue(newValue) {\n\t\tthis.setState({ value: newValue })\n\t}\n\trender() {\n\t\tconst { value } = this.state\n\t\treturn (\n\t\t\t<form\n\t\t\t\tstyle={{ marginBottom: '2em' }}\n\t\t\t\tonSubmit={(e) => e.preventDefault()}\n\t\t\t>\n\t\t\t\t<h2>Class based component example</h2>\n\n\t\t\t\t<p>\n\t\t\t\t\tThe time input polyfill has been optimized to work best with React\n\t\t\t\t\tHooks but you can still use it in a class based component.\n\t\t\t\t</p>\n\n\t\t\t\t<TestClassInput\n\t\t\t\t\tvalue={this.state.value}\n\t\t\t\t\tsetValue={(newValue) => this.setState({ value: newValue })}\n\t\t\t\t/>\n\n\t\t\t\t<p>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => this.setValue('07:15')}\n\t\t\t\t\t\tid={this.exampleId + '-button-1'}\n\t\t\t\t\t>\n\t\t\t\t\t\tSet class based time to 7:15 AM\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => this.setValue('15:45')}\n\t\t\t\t\t\tid={this.exampleId + '-button-2'}\n\t\t\t\t\t>\n\t\t\t\t\t\tSet class based time to 3:45 PM\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => this.setValue('')}\n\t\t\t\t\t\tid={this.exampleId + '-button-3'}\n\t\t\t\t\t>\n\t\t\t\t\t\tSet class based time to \" \"\n\t\t\t\t\t</button>\n\t\t\t\t</p>\n\n\t\t\t\t<p id=\"class-based-component-return-value\">\n\t\t\t\t\tclass based returned value: \"{value}\"\n\t\t\t\t</p>\n\n\t\t\t\t<SyntaxHighlighter\n\t\t\t\t\tstyle={dark}\n\t\t\t\t\tclassName=\"code\"\n\t\t\t\t\tlanguage=\"javascript\"\n\t\t\t\t\tshowLineNumbers={true}\n\t\t\t\t>\n\t\t\t\t\t{`\n\t/* TimeInput.js */\n\n\timport React, { Component } from 'react'\n\n\t// Import the component into your project\n\timport TimeInputPolyfill from '@time-input-polyfill/react'\n\n\texport class TimeInput extends Component {\n\t\trender() {\n\t\t\tconst { value, setValue, label } = this.props\n\t\t\treturn (\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<TimeInputPolyfill\n\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\tsetValue={setValue}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t)\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////\n\n\t/* ExampleForm.js */\n\n\timport React, { Component } from 'react'\n\n\t// import your local time input component into your form component\n\timport { TimeInput } from './TimeInput'\n\n\texport class ExampleForm extends Component {\n\t\tstate = { inputValue: '20:30' }\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<form>\n\t\t\t\t\t<TimeInput\n\t\t\t\t\t\tlabel=\"Label text\"\n\n\t\t\t\t\t\t// Use the state value to set the time\n\t\t\t\t\t\tvalue={this.state.inputValue}\n\n\t\t\t\t\t\t// Pass a state setter function into the component\n\t\t\t\t\t\tsetValue={(newValue) => this.setState({inputValue: newValue})}\n\t\t\t\t\t/>\n\t\t\t\t\t<button type=\"submit\">Submit</button>\n\t\t\t\t</form>\n\t\t\t)\n\t\t}\n\t}\n`.replace(/^\\n/, '')}\n\t\t\t\t</SyntaxHighlighter>\n\t\t\t</form>\n\t\t)\n\t}\n}\n\nfunction App() {\n\t// let [addedLater, setAddedLater] = useState(false)\n\t// setTimeout(() => setAddedLater(true), 2000)\n\tconst [testValue, setTestValue] = useState('default')\n\tconst [eventName, setEventName] = useState<EventName>('none')\n\tconst [altEventName, setAltEventName] = useState<AltEventName>('none')\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>React Time Input Polyfill</h1>\n\t\t\t<p>\n\t\t\t\t<i>v{version}</i>\n\t\t\t</p>\n\n\t\t\t<p>Code examples are simplified guides, not exact code replicas.</p>\n\n\t\t\t<SyntaxHighlighter\n\t\t\t\tstyle={dark}\n\t\t\t\tclassName=\"code centered\"\n\t\t\t\tlanguage=\"text\"\n\t\t\t\tshowLineNumbers={false}\n\t\t\t>\n\t\t\t\tnpm install @time-input-polyfill/react\n\t\t\t</SyntaxHighlighter>\n\n\t\t\t<p>\n\t\t\t\t<a href=\"https://github.com/Dan503/react-time-input-polyfill#react-time-input-polyfill\">\n\t\t\t\t\tVisit me on GitHub\n\t\t\t\t</a>\n\t\t\t</p>\n\n\t\t\t<ExampleBlock\n\t\t\t\tlabel=\"Polyfill demo\"\n\t\t\t\tcodeString={`\n\t/* TimeInput.js */\n\n\timport React from 'react'\n\n\t// Import the component into your project\n\timport TimeInputPolyfill from '@time-input-polyfill/react'\n\n\texport const TimeInput = ({ label, value, setValue }) => {\n\t\treturn (\n\t\t\t<label>\n\t\t\t\t<span>{label}</span>\n\t\t\t\t<TimeInputPolyfill\n\n\t\t\t\t\t// Set the value through props\n\t\t\t\t\tvalue={value}\n\n\t\t\t\t\t// Pass the state setter\n\t\t\t\t\tsetValue={setValue}\n\n\t\t\t\t\t/*  Force browsers that support input[type=time]\n\t\t\t\t\t\tto use the polyfill.\n\t\t\t\t\t\t(useful for testing and debugging)\n\t\t\t\t\t*/  forcePolyfill={true}\n\t\t\t\t/>\n\t\t\t</label>\n\t\t)\n\t}\n\n\t///////////////////////////////////////////////////\n\n\t/* ExampleForm.js */\n\n\timport React, { useState } from 'react'\n\n\t// import your local time input component into your form component\n\timport { TimeInput } from './TimeInput'\n\n\texport const ExampleForm = ()=> {\n\n\t\t// Use state to keep track of the value\n\t\tconst [inputValue, setInputValue] = useState('20:30') // default to 8:30 PM\n\n\t\t// Make use of useEffect to react to inputValue changes\n\t\tuseEffect(() => {\n\t\t\tconsole.log({ inputValue })\n\t\t}, [ inputValue ])\n\n\t\treturn (\n\t\t\t<form>\n\t\t\t\t<TimeInput\n\t\t\t\t\tlabel=\"Label text\"\n\n\t\t\t\t\t// Use the state value to set the time\n\t\t\t\t\tvalue={inputValue}\n\n\t\t\t\t\t// Pass the state setter function into the component\n\t\t\t\t\tsetValue={setInputValue}\n\t\t\t\t/>\n\t\t\t\t<button type=\"submit\">Submit</button>\n\t\t\t</form>\n\t\t)\n\t}\n`}\n\t\t\t/>\n\n\t\t\t<ClassBasedComponentExample />\n\n\t\t\t{process.env.NODE_ENV === 'development' && (\n\t\t\t\t<>\n\t\t\t\t\t<ExampleBlock\n\t\t\t\t\t\tlabel=\"Events test (localhost only)\"\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetAltEventName('change')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonFocus={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetEventName('focus')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonBlur={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetEventName('blur')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonMouseDown={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetEventName('mouseDown')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonMouseUp={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetEventName('mouseUp')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetAltEventName('click')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetEventName('keyDown')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonKeyUp={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetEventName('keyUp')\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<p id=\"events-test-value\">{testValue}</p>\n\t\t\t\t\t<p id=\"events-test-eventName\">{eventName}</p>\n\t\t\t\t\t<p id=\"events-test-altEventName\">{altEventName}</p>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// IE11 needs these polyfills to run React\nimport 'react-app-polyfill/ie11'\nimport 'react-app-polyfill/stable'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport loadJS from '@dan503/load-js'\n\nloadJS(\n\t// Promise and object.assign polyfills are only needed because of the syntax highlighter package\n\t'https://polyfill.io/v3/polyfill.min.js?features=Promise%2CObject.assign&flags=gated',\n\t() => {\n\t\tReactDOM.render(<App />, document.getElementById('root'))\n\t},\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}