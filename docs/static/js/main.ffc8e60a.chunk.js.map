{"version":3,"sources":["core/TimeInputPolyfill.js","App-tests-shared-stuff.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__createBinding","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__importDefault","exports","TimeInputPolyfill","react_1","require","load_js_1","supportsTime_1","blankValues_1","_TimeInputPolyfill","default","memo","_a","_b","value24hr","setValue24hr","setValue","_c","forcePolyfill","onChange","onFocus","onBlur","onMouseDown","onMouseUp","onKeyDown","_d","className","style","_e","polyfillSource","restProps","isPolyfilled","value24hrCache","useRef","update24hr","newValue24Hr","current","$input","_f","useState","polyfill","setPolyfill","_g","hasInitialised","setHasInitialised","_h","focusedViaClick","setFocusedViaClick","_j","blankValues","string12hr","value12hr","setValue12hr","_k","timeObject","setTimeObject","_l","cursorSegment","setCursorSegment","cursorSegmentRef","_m","allowSegmentSelection","setAllowSegmentSelection","_o","manualEntryLog","setManualEntryLog","useEffect","convertString24hr","toTimeObject","_p","forcedValue","setForcedValue","overrideTime","setTimeout","$inputElement","form","addEventListener","removeEventListener","convertTimeObject","getCursorSegment","selectSegment_1","selectSegment","segment_1","timeObjAs24hr","to24hr","timeObjAs12hr","to12hr","a11yUpdate_1","a11yUpdate","getA11yValue_1","getA11yValue","matchesTimeObject","newTimeObject","hasBlankValues","isBlankValue","key","timeObjectKeys","some","isAllBlankValues","every","getBlankValuesStatus","window","timeInputPolyfillUtils","convertString12hr_1","convertString12hr","a11yCreate","getA11yElement","ManualEntryLog_1","ManualEntryLog","getNextSegment_1","getNextSegment","timeObject_1","onUpdate","fullValue12hr","timeObj","onLimitHit","resetSegmentEntryLog","reset","hasFocus","document","activeElement","a11yUpdate_2","getA11yValue_2","polyfillClass","styles","fontFamily","polyfilledValue","createElement","isString24hr","target","isShiftHeldDown","getCursorSegment_1","a11yClear","selectCursorSegment","userChangeEvent","modifyTimeObject","getPrevSegment","regex","segment","preventDefault","increment","isolated","decrement","theNextSegment","includes","clear","alphaNumericKeyName","test","add","ref","type","join","trim","IDsAndLabels","functionBased","getIDsAndLabels","primaryTestsLabel","eventTestsLabel","classBased","ExampleBlock","label","codeString","setForcePolyfill","IDs","marginBottom","onSubmit","display","htmlFor","primaryInputID","marginRight","id","onClick","marginLeft","buttonIDs","togglePolyfillID","title","amID","toLocaleLowerCase","pmID","blankID","primaryValueID","Boolean","dark","language","showLineNumbers","replace","ClassBasedComponentExample","state","staticValues","defaultValue","cpuValue","eventsValue","eventsReturnValue","inputValue","eventMainName","eventAltName","exampleId","eventsInputID","eventsAltNameID","eventsMainNameID","eventsValueID","labels","newValue","setState","process","Component","App","version","href","location","hostname","match","loadJS","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gJACA,IAAIA,EAAYC,MAAQA,KAAKD,UAAa,WAStC,OARAA,EAAWE,OAAOC,QAAU,SAASC,GACjC,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAII,KADTL,EAAIG,UAAUF,GACOJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KACzDN,EAAEM,GAAKL,EAAEK,IAEjB,OAAON,IAEKU,MAAMb,KAAMO,YAE5BO,EAAmBd,MAAQA,KAAKc,kBAAqBb,OAAOc,OAAU,SAASC,EAAGC,EAAGC,EAAGC,QAC7EC,IAAPD,IAAkBA,EAAKD,GAC3B,IAAIG,EAAOpB,OAAOqB,yBAAyBL,EAAGC,GACzCG,KAAS,QAASA,GAAQJ,EAAEM,WAAaF,EAAKG,UAAYH,EAAKI,gBAClEJ,EAAO,CAAEK,YAAY,EAAMC,IAAK,WAAa,OAAOV,EAAEC,MAExDjB,OAAO2B,eAAeZ,EAAGG,EAAIE,IAC3B,SAASL,EAAGC,EAAGC,EAAGC,QACTC,IAAPD,IAAkBA,EAAKD,GAC3BF,EAAEG,GAAMF,EAAEC,KAEVW,EAAsB7B,MAAQA,KAAK6B,qBAAwB5B,OAAOc,OAAU,SAASC,EAAGc,GACxF7B,OAAO2B,eAAeZ,EAAG,UAAW,CAAEU,YAAY,EAAMK,MAAOD,KAC9D,SAASd,EAAGc,GACbd,EAAC,QAAcc,IAEfE,EAAgBhC,MAAQA,KAAKgC,cAAiB,SAAUC,GACxD,GAAIA,GAAOA,EAAIV,WAAY,OAAOU,EAClC,IAAIC,EAAS,GACb,GAAW,MAAPD,EAAa,IAAK,IAAIf,KAAKe,EAAe,YAANf,GAAmBjB,OAAOS,UAAUC,eAAeC,KAAKqB,EAAKf,IAAIJ,EAAgBoB,EAAQD,EAAKf,GAEtI,OADAW,EAAmBK,EAAQD,GACpBC,GAEPC,EAAUnC,MAAQA,KAAKmC,QAAW,SAAU/B,EAAGgC,GAC/C,IAAIjC,EAAI,GACR,IAAK,IAAIM,KAAKL,EAAOH,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,IAAM2B,EAAEC,QAAQ5B,GAAK,IAC9EN,EAAEM,GAAKL,EAAEK,IACb,GAAS,MAALL,GAAqD,oBAAjCH,OAAOqC,sBACtB,KAAIjC,EAAI,EAAb,IAAgBI,EAAIR,OAAOqC,sBAAsBlC,GAAIC,EAAII,EAAED,OAAQH,IAC3D+B,EAAEC,QAAQ5B,EAAEJ,IAAM,GAAKJ,OAAOS,UAAU6B,qBAAqB3B,KAAKR,EAAGK,EAAEJ,MACvEF,EAAEM,EAAEJ,IAAMD,EAAEK,EAAEJ,KAE1B,OAAOF,GAEPqC,EAAmBxC,MAAQA,KAAKwC,iBAAoB,SAAUP,GAC9D,OAAQA,GAAOA,EAAIV,WAAcU,EAAM,CAAE,QAAWA,IAExDhC,OAAO2B,eAAea,EAAS,aAAc,CAAEV,OAAO,IACtDU,EAAQC,uBAAoB,EAC5B,IAAIC,EAAUX,EAAaY,EAAQ,KAC/BC,EAAYL,EAAgBI,EAAQ,MAEpCE,EAAiBN,EAAgBI,EAAQ,MACzCG,EAAgBH,EAAQ,KA8RxBI,EAAqBL,EAAQM,QAAQC,MA1QjB,SAAUC,GAC9B,IAAIC,EAAKD,EAAGpB,MAAOsB,OAAmB,IAAPD,EAAgB,GAAKA,EAAIE,EAAeH,EAAGI,SAAUC,EAAKL,EAAGM,cAAeA,OAAuB,IAAPD,GAAwBA,EAAIE,EAAWP,EAAGO,SAAUC,EAAUR,EAAGQ,QAASC,EAAST,EAAGS,OAAQC,EAAcV,EAAGU,YAAaC,EAAYX,EAAGW,UAAWC,EAAYZ,EAAGY,UAAWC,EAAKb,EAAGc,UAAWA,OAAmB,IAAPD,EAAgB,GAAKA,EAAIE,EAAQf,EAAGe,MAAOC,EAAKhB,EAAGiB,eAAgBA,OAAwB,IAAPD,EAAgB,4DAA8DA,EAAIE,EAAYlC,EAAOgB,EAAI,CAAC,QAAS,WAAY,gBAAiB,WAAY,UAAW,SAAU,cAAe,YAAa,YAAa,YAAa,QAAS,mBAC1oBmB,EAAeb,IAAkBX,EAAeG,QAChDsB,GAAiB,EAAI5B,EAAQ6B,QAAQnB,GACrCoB,EAAa,SAAUC,GACvBH,EAAeI,QAAUD,EACzBpB,EAAaoB,IAEbE,GAAS,EAAIjC,EAAQ6B,QAAQ,MAC7BK,GAAK,EAAIlC,EAAQmC,UAAU,MAAOC,EAAWF,EAAG,GAAIG,EAAcH,EAAG,GACrEI,GAAK,EAAItC,EAAQmC,WAAU,GAAQI,EAAiBD,EAAG,GAAIE,EAAoBF,EAAG,GAClFG,GAAK,EAAIzC,EAAQmC,WAAU,GAAQO,EAAkBD,EAAG,GAAIE,EAAqBF,EAAG,GACpFG,GAAK,EAAI5C,EAAQmC,UAAU/B,EAAcyC,YAAYC,YAAaC,EAAYH,EAAG,GAAII,EAAeJ,EAAG,GACvGK,GAAK,EAAIjD,EAAQmC,UAAU/B,EAAcyC,YAAYK,YAAaA,EAAaD,EAAG,GAAIE,EAAgBF,EAAG,GACzGG,GAAK,EAAIpD,EAAQmC,UAAU,MAAOkB,EAAgBD,EAAG,GAAIE,EAAmBF,EAAG,GAC/EG,GAAmB,EAAIvD,EAAQ6B,QAAQwB,GACvCG,GAAK,EAAIxD,EAAQmC,WAAU,GAAQsB,EAAwBD,EAAG,GAAIE,EAA2BF,EAAG,GAChGG,GAAK,EAAI3D,EAAQmC,UAAU,MAAOyB,EAAiBD,EAAG,GAAIE,EAAoBF,EAAG,IACrF,EAAI3D,EAAQ8D,YAAW,WACQpD,IAAckB,EAAeI,SAC5BI,GACxBe,EAAcf,EAAS2B,kBAAkBrD,GAAWsD,kBAEzD,CAACtD,EAAW0B,IAQf,IAAI6B,GAAK,EAAIjE,EAAQmC,eAAU1D,GAAYyF,GAAcD,EAAG,GAAIE,GAAiBF,EAAG,IAEpF,EAAIjE,EAAQ8D,YAAW,WACnB,IAAItD,EACA4D,EAAe,WACfD,GAAezD,GACf2D,YAAW,WAAc,OAAOF,QAAe1F,KAAe,IAE9D6F,EAAgBrC,EAAOD,QAE3B,OAD4F,QAA3FxB,EAAuB,OAAlB8D,QAA4C,IAAlBA,OAA2B,EAASA,EAAcC,YAAyB,IAAP/D,GAAyBA,EAAGgE,iBAAiB,SAAUJ,GACpJ,WACH,IAAI5D,EACwF,QAA3FA,EAAuB,OAAlB8D,QAA4C,IAAlBA,OAA2B,EAASA,EAAcC,YAAyB,IAAP/D,GAAyBA,EAAGiE,oBAAoB,SAAUL,MAEnK,CAAC1D,KAaJ,EAAIV,EAAQ8D,YAAW,WACnB,GAAI1B,GAAYT,EAAc,CAC1B,IAAI+C,EAAoBtC,EAASsC,kBAAmBC,EAAmBvC,EAASuC,iBAAkBC,EAAkBxC,EAASyC,cACzHC,EAAYzB,GAAiBsB,EAAiB1C,EAAOD,SACrD+C,EAAgBL,EAAkBxB,GAAY8B,SAC9CC,EAAgBP,EAAkBxB,GAAYgC,SAC9CnC,IAAckC,IACdjC,EAAaiC,GACbnD,EAAWiD,IAEXtB,GACAY,YAAW,WACPO,EAAgB3C,EAAOD,QAAS8C,SAK7C,CAACrB,EAAuBJ,EAAejB,EAAUT,EAAcuB,KAClE,EAAIlD,EAAQ8D,YAAW,WACnB,GAAI1B,GAAYT,EAAc,CAC1B,IAAIwD,EAAe/C,EAASgD,WAAYC,EAAiBjD,EAASkD,aAClEjB,YAAW,WACHgB,KACAF,EAAalD,EAAOD,QAAS,CAAC,iBAI3C,CAACkB,EAAYd,EAAUT,KAC1B,EAAI3B,EAAQ8D,YAAW,WACnB,GAAI1B,GAAYT,EAAc,CAC1B,IAAIoC,EAAoB3B,EAAS2B,kBAAmBwB,EAAoBnD,EAASmD,kBAC7EC,EAAgBzB,EAAkBrD,GAAWsD,eAC7CyB,EA3Ce,SAAUvC,GACjC,IAAKd,IAAaT,EACd,MAAO,GACX,IAAI+D,EAAe,SAAUC,GAAO,OAA2B,OAApBzC,EAAWyC,IAClDC,EAAiBxD,EAASwD,eAC9B,MAAO,CACHH,eAAgBG,EAAeC,KAAKH,GACpCI,iBAAkBF,EAAeG,MAAML,IAoClBM,CAAqBR,GAAeC,eACpDF,EAAkBC,EAAetC,KAClCX,GACCkD,GACDtC,EAAcqC,MAIvB,CAAC9E,EAAW0B,EAAUT,KACzB,EAAI3B,EAAQ8D,YAAW,WACfnC,IAKA,EAAIzB,EAAUI,SAASmB,GAAgB,WACnC,GAAIwE,OAAOC,uBAAwB,CAC/B,IAAI1F,EAAKyF,OAAOC,uBAAwBC,EAAsB3F,EAAG4F,kBAAmBrC,EAAoBvD,EAAGuD,kBAAmBsC,EAAa7F,EAAG6F,WAAYC,EAAiB9F,EAAG8F,eAAgBC,EAAmB/F,EAAGgG,eAAgBC,EAAmBjG,EAAGkG,eAC1PrE,EAAY4D,OAAOC,wBACnB,IAAIS,EAAe5C,EAAkBrD,GAAWsD,eAChDb,EAAcwD,GACTL,KACDD,IAEJxC,EAAkB,IAAI0C,EAAiB,CACnCrD,WAAYyD,EACZC,SAAU,SAAUpG,GAChB,IAAIqG,EAAgBrG,EAAGqG,cACnBC,EAAUX,EAAoBU,GAAe7C,eACjDb,EAAc2D,IAElBC,WAAY,WACRzD,EAAiBmD,EAAiBlD,EAAiBvB,cAG3DQ,GAAkB,SAK/B,CAACb,IACJ,IAAIqF,GAAuB,WACnBpD,GAAkBP,GAClBO,EAAeP,GAAe4D,UAGtC,EAAIjH,EAAQ8D,YAAW,WACnBP,EAAiBvB,QAAUqB,EAC3B,IAAI6D,EAAWC,SAASC,gBAAkBnF,EAAOD,QACjD,GAAII,GAAYT,GAAgBuF,EAAU,CACtC,IAAIG,EAAejF,EAASgD,WAAYkC,EAAiBlF,EAASkD,aAClEjB,YAAW,WACHiD,IACAD,EAAapF,EAAOD,QAAS,CAAC,WAG9BqF,EAAapF,EAAOD,QAAS,CAAC,UAAW,iBAItD,CAACqB,EAAejB,EAAUT,KAE7B,EAAI3B,EAAQ8D,YAAW,WACnBkD,OAED,CAAC3D,EAAeO,IACnB,IAyGI2D,GAAgB5F,EAxRA,mCAwRmC,GACnD6F,GAASpK,EAAS,CAAEqK,WAAY,aAAelG,GAC/CmG,QAAkCjJ,IAAhByF,GAA4BnB,EAAYmB,GAC9D,OAAQlE,EAAQM,QAAQqH,cAAc,QAASvK,EAAS,GAAIsE,EAAW,CAAEX,SA5GtD,SAAUtB,GACrBsB,GACAA,EAAStB,GAGRkC,KAA8B,OAAbS,QAAkC,IAAbA,OAAsB,EAASA,EAASwF,aAAanI,EAAEoI,OAAOzI,SACrG0C,EAAWrC,EAAEoI,OAAOzI,QAsGqE4B,QAlG/E,SAAUvB,GAGxB,GAFIuB,GACAA,EAAQvB,GACR2C,GAAYT,EAAc,CAC1B+B,GAAyB,GACzB,IAAIoE,EAAkB1F,EAAS0F,gBAAiBC,EAAqB3F,EAASuC,iBAAkBS,EAAahD,EAASgD,WAClH1C,EAEA2B,YAAW,WACPf,EAAiByE,EAAmB9F,EAAOD,aAI/CsB,EAAiBwE,EAAkB,OAAS,SAEhDd,KACA5B,EAAWnD,EAAOD,QAAS,CAAC,UAAW,aAkFwEf,OA/EtG,SAAUxB,GACnBwB,GACAA,EAAOxB,GACXiE,GAAyB,GACzBf,GAAmB,GACN,OAAbP,QAAkC,IAAbA,GAA+BA,EAAS4F,aA0E0E9G,YAxErH,SAAUzB,GACxByB,GACAA,EAAYzB,GAChBkD,GAAmB,IAqEkJxB,UAnErJ,SAAU1B,GACtB0B,GACAA,EAAU1B,GACV2C,GAAYT,GACZS,EAAS6F,oBAAoBhG,EAAOD,UA+DuJZ,UA5D/K,SAAU3B,GAG1B,GAFI2B,GACAA,EAAU3B,GACV2C,GAAYT,EAAc,CAC1B,IAAIgE,EAAMlG,EAAEkG,IACRuC,EAAkB,WAAc,OAAOnH,GAAYA,EAAStB,IAC5D0I,EAAmB/F,EAAS+F,iBAAkBxD,EAAmBvC,EAASuC,iBAAkB+B,EAAiBtE,EAASsE,eAAgB0B,EAAiBhG,EAASgG,eAAgBN,EAAkB1F,EAAS0F,gBAAiBO,EAAQjG,EAASiG,MAC7OC,EAAUjF,GAAiBsB,EAAiB1C,EAAOD,SACvD,GAAY,YAAR2D,EACKtC,GACDC,EAAiBgF,GACrB7I,EAAE8I,iBACFvB,KACA7D,EAAcgF,EAAiBjF,GAAYsF,UAAUF,GAASG,YAC9DP,SAEC,GAAY,cAARvC,EACAtC,GACDC,EAAiBgF,GACrB7I,EAAE8I,iBACFvB,KACA7D,EAAcgF,EAAiBjF,GAAYwF,UAAUJ,GAASG,YAC9DP,SAEC,GAAY,cAARvC,EACLlG,EAAE8I,iBACFjF,EAAiB8E,EAAe/E,SAE/B,GAAY,eAARsC,EACLlG,EAAE8I,iBACFjF,EAAiBoD,EAAerD,SAE/B,GAAY,QAARsC,EAAe,CAGpB,KAFgBmC,GAAqC,UAAlBzE,IAC7ByE,GAAqC,SAAlBzE,GACV,CACX5D,EAAE8I,iBACF,IAAII,EAAiBb,EACfM,EAAe/E,GACfqD,EAAerD,GACrBC,EAAiBqF,QAGhB,CAAC,YAAa,UAAUC,SAASjD,IACtClG,EAAE8I,iBACElF,GACAF,EAAcgF,EAAiBjF,GAAY2F,MAAMxF,MAErD6E,KAEKG,EAAMS,oBAAoBC,KAAKpD,IAAQ/B,IAC5CnE,EAAE8I,iBACF3E,EAAe0E,GAASU,IAAIrD,GAC5BuC,OAOiNe,IAAKhH,EAAQiH,KAAMvH,EAAe,OAAS,OAAQvC,MAAOuC,EAAe+F,GAAkBhH,EAAWa,MAAOiG,GAAQlG,UAAW,CAACA,EAAWiG,IAAe4B,KAAK,KAAKC,aAAU3K,QAGhZqB,EAAQC,kBAAoBM,EAC5BP,EAAQQ,QAAUD,G,ojBCvULgJ,EAAe,CAC3BC,cAAeC,0BAAgB,CAC9BC,kBAAmB,gBACnBC,gBAAiB,gDAElBC,WAAYH,0BAAgB,CAC3BC,kBAAmB,gCACnBC,gBAAiB,8C,gCCIbE,EAAe,SAAC,GAII,IAHzBC,EAGwB,EAHxBA,MACAC,EAEwB,EAFxBA,WACGnI,EACqB,iBACxB,EAA0BS,mBAAS,SAAnC,mBAAO/C,EAAP,KAAcwB,EAAd,KACA,EAA0CuB,oBAAS,GAAnD,mBAAOrB,EAAP,KAAsBgJ,EAAtB,KACQC,EAAQR,0BAAgB,CAAEC,kBAAmBI,IAA7CG,IAER,OACC,uBAAMxI,MAAO,CAAEyI,aAAc,OAASC,SAAU,SAACxK,GAAD,OAAOA,EAAE8I,kBAAzD,UACC,6BAAKqB,IAEL,uBAAMrI,MAAO,CAAE2I,QAAS,gBAAxB,UACC,uBAAOC,QAASJ,EAAIK,eAAgB7I,MAAO,CAAE8I,YAAa,SAA1D,SACET,IAEF,cAAC7J,EAAA,kBAAD,aACCX,MAAOA,EACPwB,SAAUA,EACVU,UAAU,eACVgJ,GAAIP,EAAIK,eACRtJ,cAAeA,GACXY,IAEL,yBACC6I,QAAS,kBAAMT,GAAkBhJ,IACjCS,MAAO,CAAEiJ,WAAY,IACrBF,GAAIP,EAAIU,UAAUC,iBAClBC,MAAM,kBAJP,yBAMa,iCAAS7J,EAAgB,KAAO,cAI9C,8BACC,yBAAQyJ,QAAS,kBAAM3J,EAAS,UAAU0J,GAAIP,EAAIU,UAAUG,KAA5D,iBACMhB,EAAMiB,oBADZ,sBAGA,yBAAQN,QAAS,kBAAM3J,EAAS,UAAU0J,GAAIP,EAAIU,UAAUK,KAA5D,iBACMlB,EAAMiB,oBADZ,sBAGA,yBAAQN,QAAS,kBAAM3J,EAAS,KAAK0J,GAAIP,EAAIU,UAAUM,QAAvD,iBACMnB,EAAMiB,oBADZ,qBAKD,8BACEjB,EADF,qBAC0B,sBAAMU,GAAIP,EAAIiB,eAAd,SAA+B5L,IADzD,OAIC6L,QAAQpB,IACR,cAAC,IAAD,CACCtI,MAAO2J,IACP5J,UAAU,OACV6J,SAAS,aACTC,iBAAiB,EAJlB,SAMEvB,EAAWwB,QAAQ,MAAO,UAO1BC,E,4MACLC,MAAQ,CACPnM,MAAOoM,eAAaC,aAAaC,SACjCC,YAAaH,eAAaC,aAAaC,SACvCE,kBAAmBJ,eAAaC,aAAaI,WAC7CC,cAAe,OACfC,aAAc,OACdjL,eAAe,G,EAEhBkL,UAAY,gC,4CACZ,WAAU,IAAD,OACR,EAAiC3O,KAAKkO,MAA9BnM,EAAR,EAAQA,MAAO0B,EAAf,EAAeA,cACf,EAQIuI,EAAaK,WAAWK,IAH3BiB,GALD,EACCiB,cADD,EAECC,gBAFD,EAGCC,iBAHD,EAICC,cAJD,EAKCpB,gBACAZ,EAND,EAMCA,eACAK,EAPD,EAOCA,UAED,EACCpB,EAAaK,WAAW2C,OADA7C,GAAzB,EAAQC,gBAAR,EAAyBD,mBAEzB,OACC,uBACCjI,MAAO,CAAEyI,aAAc,OACvBC,SAAU,SAACxK,GAAD,OAAOA,EAAE8I,kBAFpB,UAIC,+DAEA,8JAKA,uBAAMhH,MAAO,CAAE2I,QAAS,gBAAxB,UACC,uBAAO3I,MAAO,CAAE8I,YAAa,SAAWF,QAASC,EAAjD,SACEZ,IAEF,cAACzJ,EAAA,kBAAD,CACCX,MAAOA,EACPwB,SAAU,SAAC0L,GAAD,OAAc,EAAKC,SAAS,CAAEnN,MAAOkN,KAC/CxL,cAAeA,EACfwJ,GAAIF,IAEL,yBACCG,QAAS,kBAAM,EAAKgC,SAAS,CAAEzL,eAAgBA,KAC/CS,MAAO,CAAEiJ,WAAY,IACrBG,MAAM,kBACNL,GAAIG,EAAUC,iBAJf,yBAMa,iCAAS5J,EAAgB,KAAO,cAI9C,8BACC,wBACCyJ,QAAS,WACR,EAAKgC,SAAS,CAAEnN,MAAO,WAExBkL,GAAIG,EAAUG,KAJf,6CAQA,wBACCL,QAAS,kBAAM,EAAKgC,SAAS,CAAEnN,MAAO,WACtCkL,GAAIG,EAAUK,KAFf,6CAMA,wBACCP,QAAS,kBAAM,EAAKgC,SAAS,CAAEnN,MAAO,MACtCkL,GAAIG,EAAUM,QAFf,4CAQD,8DAC8B,sBAAMT,GAAIU,EAAV,SAA2B5L,IADzD,OAIA,cAAC,IAAD,CACCmC,MAAO2J,IACP5J,UAAU,OACV6J,SAAS,aACTC,iBAAiB,EAJlB,SAME,gzCAqDJC,QAAQ,MAAO,OAEZmB,S,GA/IoCC,aAkX1BC,MAzJf,WAGC,MAAkCvK,mBACjCqJ,eAAaC,aAAaI,YAD3B,mBAGA,GAHA,UAGsC1J,mBAAoB,SAA1D,mBACA,GADA,UACwCA,mBAAuB,SAA/D,mBAGA,GAHA,UAE4BkH,EAAaC,cAAc+C,OAA/C5C,gBAEPJ,EAAaC,cAAcS,KAE5B,OAHA,EAAQqC,cAAR,EAAuBF,gBAAvB,EAAwCC,iBAIvC,sBAAK7K,UAAU,MAAf,UACC,2DACA,4BACC,kCAAKqL,SAGN,8FAEA,cAAC,IAAD,CACCpL,MAAO2J,IACP5J,UAAU,gBACV6J,SAAS,OACTC,iBAAiB,EAJlB,oDASA,4BACC,mBAAGwB,KAAK,gFAAR,kCAKD,cAAC,EAAD,CACChD,MAAM,gBACNC,WAAU,mjDAkEX,cAAC,EAAD,KAEC2C,MCpZgBvB,QACW,cAA7BhF,OAAO4G,SAASC,UAEe,UAA7B7G,OAAO4G,SAASC,UAEhB7G,OAAO4G,SAASC,SAASC,MACvB,2D,mBCPNC,GAEC,uFACA,WACCC,IAASC,OAAO,cAAC,EAAD,IAAS/F,SAASgG,eAAe,YDoH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ffc8e60a.chunk.js","sourcesContent":["\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TimeInputPolyfill = void 0;\r\nvar react_1 = __importStar(require(\"react\"));\r\nvar load_js_1 = __importDefault(require(\"@dan503/load-js\"));\r\n// Avoid bulk importing from index files to be more tree-shake friendly\r\nvar supportsTime_1 = __importDefault(require(\"@time-input-polyfill/utils/npm/common/supportsTime\"));\r\nvar blankValues_1 = require(\"@time-input-polyfill/utils/npm/common/blankValues\");\r\nvar polyfillClassName = 'react-time-input-polyfill-target';\r\n/**\r\n * An `input[type=time]` element with a built in polyfill for browsers that don't support the time input natively.\r\n *\r\n * Only browsers that _need_ the polyfill code will download the polyfill.\r\n *\r\n * ```jsx\r\n * import TimeInput from '@time-input-polyfill/react'\r\n * // ...\r\n * const [value, setValue] = useState()\r\n * // ...\r\n * <TimeInput value={value} setValue={setValue} />\r\n * ```\r\n *\r\n * __Resources:__\r\n * - [Demo website](https://dan503.github.io/react-time-input-polyfill/)\r\n * - [GitHub repository](https://github.com/Dan503/react-time-input-polyfill)\r\n * - [npm package](https://www.npmjs.com/package/@time-input-polyfill/react)\r\n */\r\nvar TimeInputPolyfill = function (_a) {\r\n    var _b = _a.value, value24hr = _b === void 0 ? '' : _b, setValue24hr = _a.setValue, _c = _a.forcePolyfill, forcePolyfill = _c === void 0 ? false : _c, onChange = _a.onChange, onFocus = _a.onFocus, onBlur = _a.onBlur, onMouseDown = _a.onMouseDown, onMouseUp = _a.onMouseUp, onKeyDown = _a.onKeyDown, _d = _a.className, className = _d === void 0 ? '' : _d, style = _a.style, _e = _a.polyfillSource, polyfillSource = _e === void 0 ? 'https://cdn.jsdelivr.net/npm/@time-input-polyfill/utils@1' : _e, restProps = __rest(_a, [\"value\", \"setValue\", \"forcePolyfill\", \"onChange\", \"onFocus\", \"onBlur\", \"onMouseDown\", \"onMouseUp\", \"onKeyDown\", \"className\", \"style\", \"polyfillSource\"]);\r\n    var isPolyfilled = forcePolyfill || !supportsTime_1.default;\r\n    var value24hrCache = (0, react_1.useRef)(value24hr);\r\n    var update24hr = function (newValue24Hr) {\r\n        value24hrCache.current = newValue24Hr;\r\n        setValue24hr(newValue24Hr);\r\n    };\r\n    var $input = (0, react_1.useRef)(null);\r\n    var _f = (0, react_1.useState)(null), polyfill = _f[0], setPolyfill = _f[1];\r\n    var _g = (0, react_1.useState)(false), hasInitialised = _g[0], setHasInitialised = _g[1];\r\n    var _h = (0, react_1.useState)(false), focusedViaClick = _h[0], setFocusedViaClick = _h[1];\r\n    var _j = (0, react_1.useState)(blankValues_1.blankValues.string12hr), value12hr = _j[0], setValue12hr = _j[1];\r\n    var _k = (0, react_1.useState)(blankValues_1.blankValues.timeObject), timeObject = _k[0], setTimeObject = _k[1];\r\n    var _l = (0, react_1.useState)(null), cursorSegment = _l[0], setCursorSegment = _l[1];\r\n    var cursorSegmentRef = (0, react_1.useRef)(cursorSegment);\r\n    var _m = (0, react_1.useState)(false), allowSegmentSelection = _m[0], setAllowSegmentSelection = _m[1];\r\n    var _o = (0, react_1.useState)(null), manualEntryLog = _o[0], setManualEntryLog = _o[1];\r\n    (0, react_1.useEffect)(function () {\r\n        var isBeingExternallySet = value24hr !== value24hrCache.current;\r\n        if (isBeingExternallySet && polyfill) {\r\n            setTimeObject(polyfill.convertString24hr(value24hr).toTimeObject());\r\n        }\r\n    }, [value24hr, polyfill]);\r\n    /*\r\n        <Forced override value code>\r\n\r\n        If a developer for some reason wants to use normal submit functionality\r\n        This will quickly switch IE form inputs to 24 hour time before submitting\r\n        then switch back afterwards so the user doesn't notice\r\n    */\r\n    var _p = (0, react_1.useState)(undefined), forcedValue = _p[0], setForcedValue = _p[1];\r\n    // Watch for form submission events and override the displayed time value on submit\r\n    (0, react_1.useEffect)(function () {\r\n        var _a;\r\n        var overrideTime = function () {\r\n            setForcedValue(value24hr);\r\n            setTimeout(function () { return setForcedValue(undefined); }, 1);\r\n        };\r\n        var $inputElement = $input.current;\r\n        (_a = $inputElement === null || $inputElement === void 0 ? void 0 : $inputElement.form) === null || _a === void 0 ? void 0 : _a.addEventListener('submit', overrideTime);\r\n        return function () {\r\n            var _a;\r\n            (_a = $inputElement === null || $inputElement === void 0 ? void 0 : $inputElement.form) === null || _a === void 0 ? void 0 : _a.removeEventListener('submit', overrideTime);\r\n        };\r\n    }, [value24hr]);\r\n    /* </Forced override value code>\t*/\r\n    var getBlankValuesStatus = function (timeObject) {\r\n        if (!polyfill || !isPolyfilled)\r\n            return {};\r\n        var isBlankValue = function (key) { return timeObject[key] === null; };\r\n        var timeObjectKeys = polyfill.timeObjectKeys;\r\n        return {\r\n            hasBlankValues: timeObjectKeys.some(isBlankValue),\r\n            isAllBlankValues: timeObjectKeys.every(isBlankValue),\r\n        };\r\n    };\r\n    // Do all modifications through the timeObject. React will update the other values accordingly.\r\n    (0, react_1.useEffect)(function () {\r\n        if (polyfill && isPolyfilled) {\r\n            var convertTimeObject = polyfill.convertTimeObject, getCursorSegment = polyfill.getCursorSegment, selectSegment_1 = polyfill.selectSegment;\r\n            var segment_1 = cursorSegment || getCursorSegment($input.current);\r\n            var timeObjAs24hr = convertTimeObject(timeObject).to24hr();\r\n            var timeObjAs12hr = convertTimeObject(timeObject).to12hr();\r\n            if (value12hr !== timeObjAs12hr) {\r\n                setValue12hr(timeObjAs12hr);\r\n                update24hr(timeObjAs24hr);\r\n            }\r\n            if (allowSegmentSelection) {\r\n                setTimeout(function () {\r\n                    selectSegment_1($input.current, segment_1);\r\n                });\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [allowSegmentSelection, cursorSegment, polyfill, isPolyfilled, timeObject]);\r\n    (0, react_1.useEffect)(function () {\r\n        if (polyfill && isPolyfilled) {\r\n            var a11yUpdate_1 = polyfill.a11yUpdate, getA11yValue_1 = polyfill.getA11yValue;\r\n            setTimeout(function () {\r\n                if (getA11yValue_1()) {\r\n                    a11yUpdate_1($input.current, ['update']);\r\n                }\r\n            });\r\n        }\r\n    }, [timeObject, polyfill, isPolyfilled]);\r\n    (0, react_1.useEffect)(function () {\r\n        if (polyfill && isPolyfilled) {\r\n            var convertString24hr = polyfill.convertString24hr, matchesTimeObject = polyfill.matchesTimeObject;\r\n            var newTimeObject = convertString24hr(value24hr).toTimeObject();\r\n            var hasBlankValues = getBlankValuesStatus(newTimeObject).hasBlankValues;\r\n            if (!matchesTimeObject(newTimeObject, timeObject) &&\r\n                hasInitialised &&\r\n                !hasBlankValues) {\r\n                setTimeObject(newTimeObject);\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [value24hr, polyfill, isPolyfilled]);\r\n    (0, react_1.useEffect)(function () {\r\n        if (isPolyfilled) {\r\n            // I tried making an \"essentials only\" utils js file. It somehow ended up turning into a MUCH larger file size than the original utils file.\r\n            // Original utils file size: 19,848 bytes; essentials only file size: 24,481 bytes\r\n            // So I just download the full utils instead of trying to reduce it.\r\n            // Don't worry, it only downloads the polyfill once no matter how many inputs you have on the page\r\n            (0, load_js_1.default)(polyfillSource, function () {\r\n                if (window.timeInputPolyfillUtils) {\r\n                    var _a = window.timeInputPolyfillUtils, convertString12hr_1 = _a.convertString12hr, convertString24hr = _a.convertString24hr, a11yCreate = _a.a11yCreate, getA11yElement = _a.getA11yElement, ManualEntryLog_1 = _a.ManualEntryLog, getNextSegment_1 = _a.getNextSegment;\r\n                    setPolyfill(window.timeInputPolyfillUtils);\r\n                    var timeObject_1 = convertString24hr(value24hr).toTimeObject();\r\n                    setTimeObject(timeObject_1);\r\n                    if (!getA11yElement()) {\r\n                        a11yCreate();\r\n                    }\r\n                    setManualEntryLog(new ManualEntryLog_1({\r\n                        timeObject: timeObject_1,\r\n                        onUpdate: function (_a) {\r\n                            var fullValue12hr = _a.fullValue12hr;\r\n                            var timeObj = convertString12hr_1(fullValue12hr).toTimeObject();\r\n                            setTimeObject(timeObj);\r\n                        },\r\n                        onLimitHit: function () {\r\n                            setCursorSegment(getNextSegment_1(cursorSegmentRef.current));\r\n                        },\r\n                    }));\r\n                    setHasInitialised(true);\r\n                }\r\n            });\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [isPolyfilled]);\r\n    var resetSegmentEntryLog = function () {\r\n        if (manualEntryLog && cursorSegment) {\r\n            manualEntryLog[cursorSegment].reset();\r\n        }\r\n    };\r\n    (0, react_1.useEffect)(function () {\r\n        cursorSegmentRef.current = cursorSegment;\r\n        var hasFocus = document.activeElement === $input.current;\r\n        if (polyfill && isPolyfilled && hasFocus) {\r\n            var a11yUpdate_2 = polyfill.a11yUpdate, getA11yValue_2 = polyfill.getA11yValue;\r\n            setTimeout(function () {\r\n                if (getA11yValue_2()) {\r\n                    a11yUpdate_2($input.current, ['select']);\r\n                }\r\n                else {\r\n                    a11yUpdate_2($input.current, ['initial', 'select']);\r\n                }\r\n            });\r\n        }\r\n    }, [cursorSegment, polyfill, isPolyfilled]);\r\n    //Reset entry log cursor segmet\r\n    (0, react_1.useEffect)(function () {\r\n        resetSegmentEntryLog();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [cursorSegment, manualEntryLog]);\r\n    var handleChange = function (e) {\r\n        if (onChange)\r\n            onChange(e);\r\n        // This is needed to guard against virtual keyboards sending 12hr strings in the change event.\r\n        // Mobile devices are not supported by this polyfill, all mobile devices support time inputs natively.\r\n        if (!isPolyfilled || (polyfill === null || polyfill === void 0 ? void 0 : polyfill.isString24hr(e.target.value))) {\r\n            update24hr(e.target.value);\r\n            return;\r\n        }\r\n    };\r\n    var handleFocus = function (e) {\r\n        if (onFocus)\r\n            onFocus(e);\r\n        if (polyfill && isPolyfilled) {\r\n            setAllowSegmentSelection(true);\r\n            var isShiftHeldDown = polyfill.isShiftHeldDown, getCursorSegment_1 = polyfill.getCursorSegment, a11yUpdate = polyfill.a11yUpdate;\r\n            if (focusedViaClick) {\r\n                // Need to wait for browser to settle before detecting the cursor segment\r\n                setTimeout(function () {\r\n                    setCursorSegment(getCursorSegment_1($input.current));\r\n                });\r\n            }\r\n            else {\r\n                setCursorSegment(isShiftHeldDown ? 'mode' : 'hrs12');\r\n            }\r\n            resetSegmentEntryLog();\r\n            a11yUpdate($input.current, ['initial', 'select']);\r\n        }\r\n    };\r\n    var handleBlur = function (e) {\r\n        if (onBlur)\r\n            onBlur(e);\r\n        setAllowSegmentSelection(false);\r\n        setFocusedViaClick(false);\r\n        polyfill === null || polyfill === void 0 ? void 0 : polyfill.a11yClear();\r\n    };\r\n    var handleMouseDown = function (e) {\r\n        if (onMouseDown)\r\n            onMouseDown(e);\r\n        setFocusedViaClick(true);\r\n    };\r\n    var handleMouseUp = function (e) {\r\n        if (onMouseUp)\r\n            onMouseUp(e);\r\n        if (polyfill && isPolyfilled) {\r\n            polyfill.selectCursorSegment($input.current);\r\n        }\r\n    };\r\n    var handleKeyDown = function (e) {\r\n        if (onKeyDown)\r\n            onKeyDown(e);\r\n        if (polyfill && isPolyfilled) {\r\n            var key = e.key;\r\n            var userChangeEvent = function () { return onChange && onChange(e); };\r\n            var modifyTimeObject = polyfill.modifyTimeObject, getCursorSegment = polyfill.getCursorSegment, getNextSegment = polyfill.getNextSegment, getPrevSegment = polyfill.getPrevSegment, isShiftHeldDown = polyfill.isShiftHeldDown, regex = polyfill.regex;\r\n            var segment = cursorSegment || getCursorSegment($input.current);\r\n            if (key === 'ArrowUp') {\r\n                if (!cursorSegment)\r\n                    setCursorSegment(segment);\r\n                e.preventDefault();\r\n                resetSegmentEntryLog();\r\n                setTimeObject(modifyTimeObject(timeObject).increment[segment].isolated());\r\n                userChangeEvent();\r\n            }\r\n            else if (key === 'ArrowDown') {\r\n                if (!cursorSegment)\r\n                    setCursorSegment(segment);\r\n                e.preventDefault();\r\n                resetSegmentEntryLog();\r\n                setTimeObject(modifyTimeObject(timeObject).decrement[segment].isolated());\r\n                userChangeEvent();\r\n            }\r\n            else if (key === 'ArrowLeft') {\r\n                e.preventDefault();\r\n                setCursorSegment(getPrevSegment(cursorSegment));\r\n            }\r\n            else if (key === 'ArrowRight') {\r\n                e.preventDefault();\r\n                setCursorSegment(getNextSegment(cursorSegment));\r\n            }\r\n            else if (key === 'Tab') {\r\n                var isNormal = (isShiftHeldDown && cursorSegment === 'hrs12') ||\r\n                    (!isShiftHeldDown && cursorSegment === 'mode');\r\n                if (!isNormal) {\r\n                    e.preventDefault();\r\n                    var theNextSegment = isShiftHeldDown\r\n                        ? getPrevSegment(cursorSegment)\r\n                        : getNextSegment(cursorSegment);\r\n                    setCursorSegment(theNextSegment);\r\n                }\r\n            }\r\n            else if (['Backspace', 'Delete'].includes(key)) {\r\n                e.preventDefault();\r\n                if (cursorSegment) {\r\n                    setTimeObject(modifyTimeObject(timeObject).clear[cursorSegment]());\r\n                }\r\n                userChangeEvent();\r\n            }\r\n            else if (regex.alphaNumericKeyName.test(key) && manualEntryLog) {\r\n                e.preventDefault();\r\n                manualEntryLog[segment].add(key);\r\n                userChangeEvent();\r\n            }\r\n        }\r\n    };\r\n    var polyfillClass = isPolyfilled ? polyfillClassName : '';\r\n    var styles = __assign({ fontFamily: 'monospace' }, style);\r\n    var polyfilledValue = forcedValue === undefined ? value12hr : forcedValue;\r\n    return (react_1.default.createElement(\"input\", __assign({}, restProps, { onChange: handleChange, onFocus: handleFocus, onBlur: handleBlur, onMouseDown: handleMouseDown, onMouseUp: handleMouseUp, onKeyDown: handleKeyDown, ref: $input, type: isPolyfilled ? 'text' : 'time', value: isPolyfilled ? polyfilledValue : value24hr, style: styles, className: [className, polyfillClass].join(' ').trim() || undefined })));\r\n};\r\nvar _TimeInputPolyfill = react_1.default.memo(TimeInputPolyfill);\r\nexports.TimeInputPolyfill = _TimeInputPolyfill;\r\nexports.default = _TimeInputPolyfill;\r\n","import { getIDsAndLabels } from '@time-input-polyfill/tests'\n\nexport type EventName =\n\t| 'focus'\n\t| 'blur'\n\t| 'mouseDown'\n\t| 'mouseUp'\n\t| 'keyDown'\n\t| 'keyUp'\n\t| 'none'\n\nexport type AltEventName =\n\t| 'change'\n\t| 'click'\n\t| 'none'\n\nexport const IDsAndLabels = {\n\tfunctionBased: getIDsAndLabels({\n\t\tprimaryTestsLabel: 'Polyfill demo',\n\t\teventTestsLabel: 'Function based events test - localhost only'\n\t}),\n\tclassBased: getIDsAndLabels({\n\t\tprimaryTestsLabel: 'Class based component example',\n\t\teventTestsLabel: 'Class based events test - localhost only'\n\t})\n}\n","// These polyfills are only necessary for the sake of IE11 being able to render the syntax highlighter\nimport 'core-js/features/symbol'\nimport 'core-js/features/promise'\nimport 'core-js/features/object/assign'\nimport 'core-js/features/array/includes'\nimport 'core-js/features/array/find'\nimport 'core-js/features/array/find-index'\n\nimport React, { Component, useState } from 'react'\nimport './App.css'\nimport {\n\tTimeInputPolyfill,\n\tTimeInputPolyfillProps,\n} from './core/TimeInputPolyfill'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport { version } from '../package.json'\nimport { getIDsAndLabels, staticValues } from '@time-input-polyfill/tests'\n\nimport { EventName, AltEventName, IDsAndLabels } from './App-tests-shared-stuff'\n\ninterface ExampleBlockProps\n\textends Omit<TimeInputPolyfillProps, 'value' | 'setValue'> {\n\tlabel: string\n\tcodeString?: string\n}\n\nconst ExampleBlock = ({\n\tlabel,\n\tcodeString,\n\t...restProps\n}: ExampleBlockProps) => {\n\tconst [value, setValue] = useState('20:30')\n\tconst [forcePolyfill, setForcePolyfill] = useState(true)\n\tconst { IDs } = getIDsAndLabels({ primaryTestsLabel: label })\n\n\treturn (\n\t\t<form style={{ marginBottom: '2em' }} onSubmit={(e) => e.preventDefault()}>\n\t\t\t<h2>{label}</h2>\n\n\t\t\t<span style={{ display: 'inline-block' }}>\n\t\t\t\t<label htmlFor={IDs.primaryInputID} style={{ marginRight: '0.5em' }}>\n\t\t\t\t\t{label}\n\t\t\t\t</label>\n\t\t\t\t<TimeInputPolyfill\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tsetValue={setValue}\n\t\t\t\t\tclassName=\"exampleClass\"\n\t\t\t\t\tid={IDs.primaryInputID}\n\t\t\t\t\tforcePolyfill={forcePolyfill}\n\t\t\t\t\t{...restProps}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => setForcePolyfill(!forcePolyfill)}\n\t\t\t\t\tstyle={{ marginLeft: 10 }}\n\t\t\t\t\tid={IDs.buttonIDs.togglePolyfillID}\n\t\t\t\t\ttitle=\"Toggle polyfill\"\n\t\t\t\t>\n\t\t\t\t\tPolyfill is <strong>{forcePolyfill ? 'ON' : 'OFF'}</strong>\n\t\t\t\t</button>\n\t\t\t</span>\n\n\t\t\t<p>\n\t\t\t\t<button onClick={() => setValue('07:15')} id={IDs.buttonIDs.amID}>\n\t\t\t\t\tSet {label.toLocaleLowerCase()} time to 7:15 AM\n\t\t\t\t</button>\n\t\t\t\t<button onClick={() => setValue('15:45')} id={IDs.buttonIDs.pmID}>\n\t\t\t\t\tSet {label.toLocaleLowerCase()} time to 3:45 PM\n\t\t\t\t</button>\n\t\t\t\t<button onClick={() => setValue('')} id={IDs.buttonIDs.blankID}>\n\t\t\t\t\tSet {label.toLocaleLowerCase()} time to \" \"\n\t\t\t\t</button>\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\t{label} returned value: \"<span id={IDs.primaryValueID}>{value}</span>\"\n\t\t\t</p>\n\n\t\t\t{Boolean(codeString) && (\n\t\t\t\t<SyntaxHighlighter\n\t\t\t\t\tstyle={dark}\n\t\t\t\t\tclassName=\"code\"\n\t\t\t\t\tlanguage=\"javascript\"\n\t\t\t\t\tshowLineNumbers={true}\n\t\t\t\t>\n\t\t\t\t\t{codeString.replace(/^\\n/, '')}\n\t\t\t\t</SyntaxHighlighter>\n\t\t\t)}\n\t\t</form>\n\t)\n}\n\nclass ClassBasedComponentExample extends Component {\n\tstate = {\n\t\tvalue: staticValues.defaultValue.cpuValue,\n\t\teventsValue: staticValues.defaultValue.cpuValue,\n\t\teventsReturnValue: staticValues.defaultValue.inputValue,\n\t\teventMainName: 'none',\n\t\teventAltName: 'none',\n\t\tforcePolyfill: true,\n\t}\n\texampleId = 'class-based-component-example'\n\trender() {\n\t\tconst { value, forcePolyfill } = this.state\n\t\tconst {\n\t\t\teventsInputID,\n\t\t\teventsAltNameID,\n\t\t\teventsMainNameID,\n\t\t\teventsValueID,\n\t\t\tprimaryValueID,\n\t\t\tprimaryInputID,\n\t\t\tbuttonIDs,\n\t\t} = IDsAndLabels.classBased.IDs\n\t\tconst { eventTestsLabel, primaryTestsLabel } =\n\t\t\tIDsAndLabels.classBased.labels\n\t\treturn (\n\t\t\t<form\n\t\t\t\tstyle={{ marginBottom: '2em' }}\n\t\t\t\tonSubmit={(e) => e.preventDefault()}\n\t\t\t>\n\t\t\t\t<h2>Class based component example</h2>\n\n\t\t\t\t<p>\n\t\t\t\t\tThe time input polyfill has been optimized to work best with React\n\t\t\t\t\tHooks but you can still use it in a class based component.\n\t\t\t\t</p>\n\n\t\t\t\t<span style={{ display: 'inline-block' }}>\n\t\t\t\t\t<label style={{ marginRight: '0.5em' }} htmlFor={primaryInputID}>\n\t\t\t\t\t\t{primaryTestsLabel}\n\t\t\t\t\t</label>\n\t\t\t\t\t<TimeInputPolyfill\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tsetValue={(newValue) => this.setState({ value: newValue })}\n\t\t\t\t\t\tforcePolyfill={forcePolyfill}\n\t\t\t\t\t\tid={primaryInputID}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => this.setState({ forcePolyfill: !forcePolyfill })}\n\t\t\t\t\t\tstyle={{ marginLeft: 10 }}\n\t\t\t\t\t\ttitle=\"Toggle polyfill\"\n\t\t\t\t\t\tid={buttonIDs.togglePolyfillID}\n\t\t\t\t\t>\n\t\t\t\t\t\tPolyfill is <strong>{forcePolyfill ? 'ON' : 'OFF'}</strong>\n\t\t\t\t\t</button>\n\t\t\t\t</span>\n\n\t\t\t\t<p>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.setState({ value: '07:15' })\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tid={buttonIDs.amID}\n\t\t\t\t\t>\n\t\t\t\t\t\tSet class based time to 7:15 AM\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => this.setState({ value: '15:45' })}\n\t\t\t\t\t\tid={buttonIDs.pmID}\n\t\t\t\t\t>\n\t\t\t\t\t\tSet class based time to 3:45 PM\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => this.setState({ value: '' })}\n\t\t\t\t\t\tid={buttonIDs.blankID}\n\t\t\t\t\t>\n\t\t\t\t\t\tSet class based time to \" \"\n\t\t\t\t\t</button>\n\t\t\t\t</p>\n\n\t\t\t\t<p>\n\t\t\t\t\tclass based returned value: \"<span id={primaryValueID}>{value}</span>\"\n\t\t\t\t</p>\n\n\t\t\t\t<SyntaxHighlighter\n\t\t\t\t\tstyle={dark}\n\t\t\t\t\tclassName=\"code\"\n\t\t\t\t\tlanguage=\"javascript\"\n\t\t\t\t\tshowLineNumbers={true}\n\t\t\t\t>\n\t\t\t\t\t{`\n\t/* TimeInput.js */\n\n\timport React, { Component } from 'react'\n\n\t// Import the component into your project\n\timport TimeInputPolyfill from '@time-input-polyfill/react'\n\n\texport class TimeInput extends Component {\n\t\trender() {\n\t\t\tconst { value, setValue, label } = this.props\n\t\t\treturn (\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<TimeInputPolyfill\n\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\tsetValue={setValue}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t)\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////\n\n\t/* ExampleForm.js */\n\n\timport React, { Component } from 'react'\n\n\t// import your local time input component into your form component\n\timport { TimeInput } from './TimeInput'\n\n\texport class ExampleForm extends Component {\n\t\tstate = { inputValue: '20:30' }\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<form>\n\t\t\t\t\t<TimeInput\n\t\t\t\t\t\tlabel=\"Label text\"\n\n\t\t\t\t\t\t// Use the state value to set the time\n\t\t\t\t\t\tvalue={this.state.inputValue}\n\n\t\t\t\t\t\t// Pass a state setter function into the component\n\t\t\t\t\t\tsetValue={(newValue) => this.setState({inputValue: newValue})}\n\t\t\t\t\t/>\n\t\t\t\t\t<button type=\"submit\">Submit</button>\n\t\t\t\t</form>\n\t\t\t)\n\t\t}\n\t}\n`.replace(/^\\n/, '')}\n\t\t\t\t</SyntaxHighlighter>\n\t\t\t\t{process.env.NODE_ENV === 'development' && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2>{eventTestsLabel}</h2>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<label htmlFor={eventsInputID}>{eventTestsLabel}</label>\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<TimeInputPolyfill\n\t\t\t\t\t\t\t\tid={eventsInputID}\n\t\t\t\t\t\t\t\tvalue={this.state.eventsValue}\n\t\t\t\t\t\t\t\tsetValue={(newValue) => {\n\t\t\t\t\t\t\t\t\tthis.setState({ eventsValue: newValue })\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tforcePolyfill\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\teventsReturnValue: e.currentTarget.value,\n\t\t\t\t\t\t\t\t\t\teventAltName: 'change',\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonFocus={(e) => {\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\teventsReturnValue: e.currentTarget.value,\n\t\t\t\t\t\t\t\t\t\teventMainName: 'focus',\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonBlur={(e) => {\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\teventsReturnValue: e.currentTarget.value,\n\t\t\t\t\t\t\t\t\t\teventMainName: 'blur',\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonMouseDown={(e) => {\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\teventsReturnValue: e.currentTarget.value,\n\t\t\t\t\t\t\t\t\t\teventMainName: 'mouseDown',\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonMouseUp={(e) => {\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\teventsReturnValue: e.currentTarget.value,\n\t\t\t\t\t\t\t\t\t\teventMainName: 'mouseUp',\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\teventsReturnValue: e.currentTarget.value,\n\t\t\t\t\t\t\t\t\t\teventAltName: 'click',\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\teventsReturnValue: e.currentTarget.value,\n\t\t\t\t\t\t\t\t\t\teventMainName: 'keyDown',\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonKeyUp={(e) => {\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\teventsReturnValue: e.currentTarget.value,\n\t\t\t\t\t\t\t\t\t\teventMainName: 'keyUp',\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<p id={eventsValueID}>{this.state.eventsReturnValue}</p>\n\t\t\t\t\t\t\t<p id={eventsMainNameID}>{this.state.eventMainName}</p>\n\t\t\t\t\t\t\t<p id={eventsAltNameID}>{this.state.eventAltName}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</form>\n\t\t)\n\t}\n}\n\nfunction App() {\n\t// let [addedLater, setAddedLater] = useState(false)\n\t// setTimeout(() => setAddedLater(true), 2000)\n\tconst [testValue, setTestValue] = useState(\n\t\tstaticValues.defaultValue.inputValue,\n\t)\n\tconst [eventMainName, setEventName] = useState<EventName>('none')\n\tconst [eventAltName, setAltEventName] = useState<AltEventName>('none')\n\n\tconst { eventTestsLabel } = IDsAndLabels.functionBased.labels\n\tconst { eventsValueID, eventsAltNameID, eventsMainNameID } =\n\t\tIDsAndLabels.functionBased.IDs\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>React Time Input Polyfill</h1>\n\t\t\t<p>\n\t\t\t\t<i>v{version}</i>\n\t\t\t</p>\n\n\t\t\t<p>Code examples are simplified guides, not exact code replicas.</p>\n\n\t\t\t<SyntaxHighlighter\n\t\t\t\tstyle={dark}\n\t\t\t\tclassName=\"code centered\"\n\t\t\t\tlanguage=\"text\"\n\t\t\t\tshowLineNumbers={false}\n\t\t\t>\n\t\t\t\tnpm install @time-input-polyfill/react\n\t\t\t</SyntaxHighlighter>\n\n\t\t\t<p>\n\t\t\t\t<a href=\"https://github.com/Dan503/react-time-input-polyfill#react-time-input-polyfill\">\n\t\t\t\t\tVisit me on GitHub\n\t\t\t\t</a>\n\t\t\t</p>\n\n\t\t\t<ExampleBlock\n\t\t\t\tlabel=\"Polyfill demo\"\n\t\t\t\tcodeString={`\n\t/* TimeInput.js */\n\n\timport React from 'react'\n\n\t// Import the component into your project\n\timport TimeInputPolyfill from '@time-input-polyfill/react'\n\n\texport const TimeInput = ({ label, value, setValue }) => {\n\t\treturn (\n\t\t\t<label>\n\t\t\t\t<span>{label}</span>\n\t\t\t\t<TimeInputPolyfill\n\n\t\t\t\t\t// Set the value through props\n\t\t\t\t\tvalue={value}\n\n\t\t\t\t\t// Pass the state setter\n\t\t\t\t\tsetValue={setValue}\n\n\t\t\t\t\t/*  Force browsers that support input[type=time]\n\t\t\t\t\t\tto use the polyfill.\n\t\t\t\t\t\t(useful for testing and debugging)\n\t\t\t\t\t*/  forcePolyfill={true}\n\t\t\t\t/>\n\t\t\t</label>\n\t\t)\n\t}\n\n\t///////////////////////////////////////////////////\n\n\t/* ExampleForm.js */\n\n\timport React, { useState } from 'react'\n\n\t// import your local time input component into your form component\n\timport { TimeInput } from './TimeInput'\n\n\texport const ExampleForm = ()=> {\n\n\t\t// Use state to keep track of the value\n\t\tconst [inputValue, setInputValue] = useState('20:30') // default to 8:30 PM\n\n\t\t// Make use of useEffect to react to inputValue changes\n\t\tuseEffect(() => {\n\t\t\tconsole.log({ inputValue })\n\t\t}, [ inputValue ])\n\n\t\treturn (\n\t\t\t<form>\n\t\t\t\t<TimeInput\n\t\t\t\t\tlabel=\"Label text\"\n\n\t\t\t\t\t// Use the state value to set the time\n\t\t\t\t\tvalue={inputValue}\n\n\t\t\t\t\t// Pass the state setter function into the component\n\t\t\t\t\tsetValue={setInputValue}\n\t\t\t\t/>\n\t\t\t\t<button type=\"submit\">Submit</button>\n\t\t\t</form>\n\t\t)\n\t}\n`}\n\t\t\t/>\n\n\t\t\t<ClassBasedComponentExample />\n\n\t\t\t{process.env.NODE_ENV === 'development' && (\n\t\t\t\t<>\n\t\t\t\t\t<ExampleBlock\n\t\t\t\t\t\tlabel={eventTestsLabel}\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetAltEventName('change')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonFocus={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetEventName('focus')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonBlur={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetEventName('blur')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonMouseDown={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetEventName('mouseDown')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonMouseUp={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetEventName('mouseUp')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetAltEventName('click')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetEventName('keyDown')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonKeyUp={(e) => {\n\t\t\t\t\t\t\tsetTestValue(e.currentTarget.value)\n\t\t\t\t\t\t\tsetEventName('keyUp')\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<p id={eventsValueID}>{testValue}</p>\n\t\t\t\t\t<p id={eventsMainNameID}>{eventMainName}</p>\n\t\t\t\t\t<p id={eventsAltNameID}>{eventAltName}</p>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// IE11 needs these polyfills to run React\nimport 'react-app-polyfill/ie11'\nimport 'react-app-polyfill/stable'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport loadJS from '@dan503/load-js'\n\nloadJS(\n\t// Promise and object.assign polyfills are only needed because of the syntax highlighter package\n\t'https://polyfill.io/v3/polyfill.min.js?features=Promise%2CObject.assign&flags=gated',\n\t() => {\n\t\tReactDOM.render(<App />, document.getElementById('root'))\n\t},\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}